{
  "openapi": "3.1.0",
  "info": {
    "title": "Directory API",
    "description": "Generated API documentation",
    "contact": {
      "name": "Meitner",
      "url": "https://meitner.se",
      "email": "support@meitner.se"
    },
    "license": {
      "name": "Proprietary - Licensed to Authorized Customers Only",
      "url": "https://meitner.se"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.meitner.se/directory/v1",
      "description": "Server to use in production",
      "x-speakeasy-server-id": "production"
    },
    {
      "url": "https://api.staging.meitner.se/directory/v1",
      "description": "Server to use when building and testing the API",
      "x-speakeasy-server-id": "staging"
    }
  ],
  "paths": {
    "/school": {
      "get": {
        "tags": [
          "School"
        ],
        "summary": "List Schools",
        "description": "Returns a paginated list of all `Schools` in your organization.",
        "operationId": "SchoolList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Schools to return (default: 50) when listing Schools",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Schools to skip before starting to return results (default: 0) when listing Schools",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for School List operation - returns a paginated list of School",
            "$ref": "#/components/responses/SchoolList"
          },
          "400": {
            "description": "Bad Request error for School List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for School List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for School List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for School List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for School List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for School List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for School List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "schools",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "School"
        ],
        "summary": "Create a new School",
        "description": "Create a new School",
        "operationId": "SchoolCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolCreate"
        },
        "responses": {
          "201": {
            "description": "Response for School Create operation - returns the created School",
            "$ref": "#/components/responses/SchoolCreate"
          },
          "400": {
            "description": "Bad Request error for School Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for School Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for School Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for School Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for School Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for School Create operation - request data failed validation",
            "$ref": "#/components/responses/SchoolCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for School Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for School Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "schools",
        "x-speakeasy-name-override": "create"
      }
    },
    "/school/_search": {
      "post": {
        "tags": [
          "School"
        ],
        "summary": "Search Schools",
        "description": "Search for `Schools` with filtering capabilities.",
        "operationId": "SchoolSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Schools to return (default: 50) when searching Schools",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Schools to skip before starting to return results (default: 0) when searching Schools",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolSearch"
        },
        "responses": {
          "200": {
            "description": "Response for School Search operation - returns filtered School results",
            "$ref": "#/components/responses/SchoolSearch"
          },
          "400": {
            "description": "Bad Request error for School Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for School Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for School Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for School Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for School Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for School Search operation - request data failed validation",
            "$ref": "#/components/responses/SchoolSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for School Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for School Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "schools",
        "x-speakeasy-name-override": "search"
      }
    },
    "/school/{id}": {
      "get": {
        "tags": [
          "School"
        ],
        "summary": "Get a School",
        "description": "Retrieves the `School` with the given ID.",
        "operationId": "SchoolGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the School to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for School Get operation - returns the requested School",
            "$ref": "#/components/responses/SchoolGet"
          },
          "400": {
            "description": "Bad Request error for School Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for School Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for School Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for School Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for School Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for School Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for School Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "schools",
        "x-speakeasy-name-override": "get"
      },
      "patch": {
        "tags": [
          "School"
        ],
        "summary": "Update a School",
        "description": "Update a School",
        "operationId": "SchoolUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the School to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SchoolUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for School Update operation - returns the updated School",
            "$ref": "#/components/responses/SchoolUpdate"
          },
          "400": {
            "description": "Bad Request error for School Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for School Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for School Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for School Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for School Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for School Update operation - request data failed validation",
            "$ref": "#/components/responses/SchoolUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for School Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for School Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "schools",
        "x-speakeasy-name-override": "update"
      }
    },
    "/group": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List Groups",
        "description": "Returns a paginated list of all `Groups` in your organization.",
        "operationId": "GroupList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Groups to return (default: 50) when listing Groups",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Groups to skip before starting to return results (default: 0) when listing Groups",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Group List operation - returns a paginated list of Group",
            "$ref": "#/components/responses/GroupList"
          },
          "400": {
            "description": "Bad Request error for Group List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new Group",
        "description": "Create a new Group",
        "operationId": "GroupCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupCreate"
        },
        "responses": {
          "201": {
            "description": "Response for Group Create operation - returns the created Group",
            "$ref": "#/components/responses/GroupCreate"
          },
          "400": {
            "description": "Bad Request error for Group Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Group Create operation - request data failed validation",
            "$ref": "#/components/responses/GroupCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "create"
      }
    },
    "/group/_search": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Search Groups",
        "description": "Search for `Groups` with filtering capabilities.",
        "operationId": "GroupSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Groups to return (default: 50) when searching Groups",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Groups to skip before starting to return results (default: 0) when searching Groups",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupSearch"
        },
        "responses": {
          "200": {
            "description": "Response for Group Search operation - returns filtered Group results",
            "$ref": "#/components/responses/GroupSearch"
          },
          "400": {
            "description": "Bad Request error for Group Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Group Search operation - request data failed validation",
            "$ref": "#/components/responses/GroupSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "search"
      }
    },
    "/group/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Get a Group",
        "description": "Retrieves the `Group` with the given ID.",
        "operationId": "GroupGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Group to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Group Get operation - returns the requested Group",
            "$ref": "#/components/responses/GroupGet"
          },
          "400": {
            "description": "Bad Request error for Group Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Delete a Group",
        "description": "Delete a Group",
        "operationId": "GroupDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Group to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for Group Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for Group Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Update a Group",
        "description": "Update a Group",
        "operationId": "GroupUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Group to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for Group Update operation - returns the updated Group",
            "$ref": "#/components/responses/GroupUpdate"
          },
          "400": {
            "description": "Bad Request error for Group Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Group Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Group Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Group Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Group Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Group Update operation - request data failed validation",
            "$ref": "#/components/responses/GroupUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Group Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Group Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "groups",
        "x-speakeasy-name-override": "update"
      }
    },
    "/employee": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "List Employees",
        "description": "Returns a paginated list of all `Employees` in your organization.",
        "operationId": "EmployeeList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Employees to return (default: 50) when listing Employees",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Employees to skip before starting to return results (default: 0) when listing Employees",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Employee List operation - returns a paginated list of Employee",
            "$ref": "#/components/responses/EmployeeList"
          },
          "400": {
            "description": "Bad Request error for Employee List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Create a new Employee",
        "description": "Create a new Employee",
        "operationId": "EmployeeCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeCreate"
        },
        "responses": {
          "201": {
            "description": "Response for Employee Create operation - returns the created Employee",
            "$ref": "#/components/responses/EmployeeCreate"
          },
          "400": {
            "description": "Bad Request error for Employee Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Employee Create operation - request data failed validation",
            "$ref": "#/components/responses/EmployeeCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "create"
      }
    },
    "/employee/_search": {
      "post": {
        "tags": [
          "Employee"
        ],
        "summary": "Search Employees",
        "description": "Search for `Employees` with filtering capabilities.",
        "operationId": "EmployeeSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Employees to return (default: 50) when searching Employees",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Employees to skip before starting to return results (default: 0) when searching Employees",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeSearch"
        },
        "responses": {
          "200": {
            "description": "Response for Employee Search operation - returns filtered Employee results",
            "$ref": "#/components/responses/EmployeeSearch"
          },
          "400": {
            "description": "Bad Request error for Employee Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Employee Search operation - request data failed validation",
            "$ref": "#/components/responses/EmployeeSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "search"
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": [
          "Employee"
        ],
        "summary": "Get a Employee",
        "description": "Retrieves the `Employee` with the given ID.",
        "operationId": "EmployeeGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Employee to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Employee Get operation - returns the requested Employee",
            "$ref": "#/components/responses/EmployeeGet"
          },
          "400": {
            "description": "Bad Request error for Employee Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Employee"
        ],
        "summary": "Delete a Employee",
        "description": "Delete a Employee",
        "operationId": "EmployeeDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Employee to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for Employee Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for Employee Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "Employee"
        ],
        "summary": "Update a Employee",
        "description": "Update a Employee",
        "operationId": "EmployeeUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Employee to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeeUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for Employee Update operation - returns the updated Employee",
            "$ref": "#/components/responses/EmployeeUpdate"
          },
          "400": {
            "description": "Bad Request error for Employee Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Employee Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Employee Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Employee Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Employee Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Employee Update operation - request data failed validation",
            "$ref": "#/components/responses/EmployeeUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Employee Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Employee Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employees",
        "x-speakeasy-name-override": "update"
      }
    },
    "/employee-placement": {
      "get": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "List EmployeePlacements",
        "description": "Returns a paginated list of all `EmployeePlacements` in your organization.",
        "operationId": "EmployeePlacementList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of EmployeePlacements to return (default: 50) when listing EmployeePlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of EmployeePlacements to skip before starting to return results (default: 0) when listing EmployeePlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for EmployeePlacement List operation - returns a paginated list of EmployeePlacement",
            "$ref": "#/components/responses/EmployeePlacementList"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "Create a new EmployeePlacement",
        "description": "Create a new EmployeePlacement",
        "operationId": "EmployeePlacementCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementCreate"
        },
        "responses": {
          "201": {
            "description": "Response for EmployeePlacement Create operation - returns the created EmployeePlacement",
            "$ref": "#/components/responses/EmployeePlacementCreate"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for EmployeePlacement Create operation - request data failed validation",
            "$ref": "#/components/responses/EmployeePlacementCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "create"
      }
    },
    "/employee-placement/_search": {
      "post": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "Search EmployeePlacements",
        "description": "Search for `EmployeePlacements` with filtering capabilities.",
        "operationId": "EmployeePlacementSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of EmployeePlacements to return (default: 50) when searching EmployeePlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of EmployeePlacements to skip before starting to return results (default: 0) when searching EmployeePlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementSearch"
        },
        "responses": {
          "200": {
            "description": "Response for EmployeePlacement Search operation - returns filtered EmployeePlacement results",
            "$ref": "#/components/responses/EmployeePlacementSearch"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for EmployeePlacement Search operation - request data failed validation",
            "$ref": "#/components/responses/EmployeePlacementSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "search"
      }
    },
    "/employee-placement/{id}": {
      "get": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "Get a EmployeePlacement",
        "description": "Retrieves the `EmployeePlacement` with the given ID.",
        "operationId": "EmployeePlacementGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the EmployeePlacement to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for EmployeePlacement Get operation - returns the requested EmployeePlacement",
            "$ref": "#/components/responses/EmployeePlacementGet"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "Delete a EmployeePlacement",
        "description": "Delete a EmployeePlacement",
        "operationId": "EmployeePlacementDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the EmployeePlacement to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for EmployeePlacement Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "EmployeePlacement"
        ],
        "summary": "Update a EmployeePlacement",
        "description": "Update a EmployeePlacement",
        "operationId": "EmployeePlacementUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the EmployeePlacement to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EmployeePlacementUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for EmployeePlacement Update operation - returns the updated EmployeePlacement",
            "$ref": "#/components/responses/EmployeePlacementUpdate"
          },
          "400": {
            "description": "Bad Request error for EmployeePlacement Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for EmployeePlacement Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for EmployeePlacement Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for EmployeePlacement Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for EmployeePlacement Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for EmployeePlacement Update operation - request data failed validation",
            "$ref": "#/components/responses/EmployeePlacementUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for EmployeePlacement Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for EmployeePlacement Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "employeePlacements",
        "x-speakeasy-name-override": "update"
      }
    },
    "/guardian": {
      "get": {
        "tags": [
          "Guardian"
        ],
        "summary": "List Guardians",
        "description": "Returns a paginated list of all `Guardians` in your organization.",
        "operationId": "GuardianList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Guardians to return (default: 50) when listing Guardians",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Guardians to skip before starting to return results (default: 0) when listing Guardians",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Guardian List operation - returns a paginated list of Guardian",
            "$ref": "#/components/responses/GuardianList"
          },
          "400": {
            "description": "Bad Request error for Guardian List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "Guardian"
        ],
        "summary": "Create a new Guardian",
        "description": "Create a new Guardian",
        "operationId": "GuardianCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianCreate"
        },
        "responses": {
          "201": {
            "description": "Response for Guardian Create operation - returns the created Guardian",
            "$ref": "#/components/responses/GuardianCreate"
          },
          "400": {
            "description": "Bad Request error for Guardian Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Guardian Create operation - request data failed validation",
            "$ref": "#/components/responses/GuardianCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "create"
      }
    },
    "/guardian/_search": {
      "post": {
        "tags": [
          "Guardian"
        ],
        "summary": "Search Guardians",
        "description": "Search for `Guardians` with filtering capabilities.",
        "operationId": "GuardianSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Guardians to return (default: 50) when searching Guardians",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Guardians to skip before starting to return results (default: 0) when searching Guardians",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianSearch"
        },
        "responses": {
          "200": {
            "description": "Response for Guardian Search operation - returns filtered Guardian results",
            "$ref": "#/components/responses/GuardianSearch"
          },
          "400": {
            "description": "Bad Request error for Guardian Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Guardian Search operation - request data failed validation",
            "$ref": "#/components/responses/GuardianSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "search"
      }
    },
    "/guardian/{id}": {
      "get": {
        "tags": [
          "Guardian"
        ],
        "summary": "Get a Guardian",
        "description": "Retrieves the `Guardian` with the given ID.",
        "operationId": "GuardianGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Guardian to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Guardian Get operation - returns the requested Guardian",
            "$ref": "#/components/responses/GuardianGet"
          },
          "400": {
            "description": "Bad Request error for Guardian Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Guardian"
        ],
        "summary": "Delete a Guardian",
        "description": "Delete a Guardian",
        "operationId": "GuardianDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Guardian to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for Guardian Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for Guardian Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "Guardian"
        ],
        "summary": "Update a Guardian",
        "description": "Update a Guardian",
        "operationId": "GuardianUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Guardian to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GuardianUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for Guardian Update operation - returns the updated Guardian",
            "$ref": "#/components/responses/GuardianUpdate"
          },
          "400": {
            "description": "Bad Request error for Guardian Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Guardian Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Guardian Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Guardian Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Guardian Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Guardian Update operation - request data failed validation",
            "$ref": "#/components/responses/GuardianUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Guardian Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Guardian Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "guardians",
        "x-speakeasy-name-override": "update"
      }
    },
    "/student": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "List Students",
        "description": "Returns a paginated list of all `Students` in your organization.",
        "operationId": "StudentList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Students to return (default: 50) when listing Students",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Students to skip before starting to return results (default: 0) when listing Students",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Student List operation - returns a paginated list of Student",
            "$ref": "#/components/responses/StudentList"
          },
          "400": {
            "description": "Bad Request error for Student List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Create a new Student",
        "description": "Create a new Student",
        "operationId": "StudentCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentCreate"
        },
        "responses": {
          "201": {
            "description": "Response for Student Create operation - returns the created Student",
            "$ref": "#/components/responses/StudentCreate"
          },
          "400": {
            "description": "Bad Request error for Student Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Student Create operation - request data failed validation",
            "$ref": "#/components/responses/StudentCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "create"
      }
    },
    "/student/_search": {
      "post": {
        "tags": [
          "Student"
        ],
        "summary": "Search Students",
        "description": "Search for `Students` with filtering capabilities.",
        "operationId": "StudentSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of Students to return (default: 50) when searching Students",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of Students to skip before starting to return results (default: 0) when searching Students",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentSearch"
        },
        "responses": {
          "200": {
            "description": "Response for Student Search operation - returns filtered Student results",
            "$ref": "#/components/responses/StudentSearch"
          },
          "400": {
            "description": "Bad Request error for Student Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Student Search operation - request data failed validation",
            "$ref": "#/components/responses/StudentSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "search"
      }
    },
    "/student/{id}": {
      "get": {
        "tags": [
          "Student"
        ],
        "summary": "Get a Student",
        "description": "Retrieves the `Student` with the given ID.",
        "operationId": "StudentGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Student to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for Student Get operation - returns the requested Student",
            "$ref": "#/components/responses/StudentGet"
          },
          "400": {
            "description": "Bad Request error for Student Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "Student"
        ],
        "summary": "Delete a Student",
        "description": "Delete a Student",
        "operationId": "StudentDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Student to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for Student Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for Student Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "Student"
        ],
        "summary": "Update a Student",
        "description": "Update a Student",
        "operationId": "StudentUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the Student to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for Student Update operation - returns the updated Student",
            "$ref": "#/components/responses/StudentUpdate"
          },
          "400": {
            "description": "Bad Request error for Student Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for Student Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for Student Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for Student Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for Student Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for Student Update operation - request data failed validation",
            "$ref": "#/components/responses/StudentUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for Student Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for Student Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "students",
        "x-speakeasy-name-override": "update"
      }
    },
    "/student-placement": {
      "get": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "List StudentPlacements",
        "description": "Returns a paginated list of all `StudentPlacements` in your organization.",
        "operationId": "StudentPlacementList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of StudentPlacements to return (default: 50) when listing StudentPlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of StudentPlacements to skip before starting to return results (default: 0) when listing StudentPlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for StudentPlacement List operation - returns a paginated list of StudentPlacement",
            "$ref": "#/components/responses/StudentPlacementList"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "list"
      },
      "post": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "Create a new StudentPlacement",
        "description": "Create a new StudentPlacement",
        "operationId": "StudentPlacementCreate",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementCreate"
        },
        "responses": {
          "201": {
            "description": "Response for StudentPlacement Create operation - returns the created StudentPlacement",
            "$ref": "#/components/responses/StudentPlacementCreate"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Create operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Create operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Create operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Create operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Create operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for StudentPlacement Create operation - request data failed validation",
            "$ref": "#/components/responses/StudentPlacementCreate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Create operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Create operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "create"
      }
    },
    "/student-placement/_search": {
      "post": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "Search StudentPlacements",
        "description": "Search for `StudentPlacements` with filtering capabilities.",
        "operationId": "StudentPlacementSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of StudentPlacements to return (default: 50) when searching StudentPlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of StudentPlacements to skip before starting to return results (default: 0) when searching StudentPlacements",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementSearch"
        },
        "responses": {
          "200": {
            "description": "Response for StudentPlacement Search operation - returns filtered StudentPlacement results",
            "$ref": "#/components/responses/StudentPlacementSearch"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for StudentPlacement Search operation - request data failed validation",
            "$ref": "#/components/responses/StudentPlacementSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "search"
      }
    },
    "/student-placement/{id}": {
      "get": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "Get a StudentPlacement",
        "description": "Retrieves the `StudentPlacement` with the given ID.",
        "operationId": "StudentPlacementGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the StudentPlacement to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for StudentPlacement Get operation - returns the requested StudentPlacement",
            "$ref": "#/components/responses/StudentPlacementGet"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "get"
      },
      "delete": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "Delete a StudentPlacement",
        "description": "Delete a StudentPlacement",
        "operationId": "StudentPlacementDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the StudentPlacement to delete",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response for StudentPlacement Delete operation - confirms successful deletion"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Delete operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Delete operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Delete operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Delete operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Delete operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Delete operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Delete operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "delete"
      },
      "patch": {
        "tags": [
          "StudentPlacement"
        ],
        "summary": "Update a StudentPlacement",
        "description": "Update a StudentPlacement",
        "operationId": "StudentPlacementUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the StudentPlacement to update",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StudentPlacementUpdate"
        },
        "responses": {
          "200": {
            "description": "Response for StudentPlacement Update operation - returns the updated StudentPlacement",
            "$ref": "#/components/responses/StudentPlacementUpdate"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Update operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Update operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Update operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Update operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Update operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for StudentPlacement Update operation - request data failed validation",
            "$ref": "#/components/responses/StudentPlacementUpdate422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Update operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Update operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "update"
      }
    },
    "/student-placement/{id}/archive": {
      "patch": {
        "tags": [
          "StudentPlacement"
        ],
        "description": "Archive a student placement",
        "operationId": "StudentPlacementArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the student placement to archive",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for StudentPlacement Archive operation",
            "$ref": "#/components/responses/StudentPlacementArchive"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Archive operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Archive operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Archive operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Archive operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Archive operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Archive operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Archive operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "archive"
      }
    },
    "/student-placement/{id}/restore": {
      "patch": {
        "tags": [
          "StudentPlacement"
        ],
        "description": "Restore an archived student placement",
        "operationId": "StudentPlacementRestore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the student placement to restore",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for StudentPlacement Restore operation",
            "$ref": "#/components/responses/StudentPlacementRestore"
          },
          "400": {
            "description": "Bad Request error for StudentPlacement Restore operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for StudentPlacement Restore operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for StudentPlacement Restore operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for StudentPlacement Restore operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for StudentPlacement Restore operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for StudentPlacement Restore operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for StudentPlacement Restore operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "studentPlacements",
        "x-speakeasy-name-override": "restore"
      }
    },
    "/audit-event": {
      "get": {
        "tags": [
          "AuditEvent"
        ],
        "summary": "List AuditEvents",
        "description": "Returns a paginated list of all `AuditEvents` in your organization.",
        "operationId": "AuditEventList",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of AuditEvents to return (default: 50) when listing AuditEvents",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of AuditEvents to skip before starting to return results (default: 0) when listing AuditEvents",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for AuditEvent List operation - returns a paginated list of AuditEvent",
            "$ref": "#/components/responses/AuditEventList"
          },
          "400": {
            "description": "Bad Request error for AuditEvent List operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for AuditEvent List operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for AuditEvent List operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for AuditEvent List operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for AuditEvent List operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for AuditEvent List operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for AuditEvent List operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "auditEvents",
        "x-speakeasy-name-override": "list"
      }
    },
    "/audit-event/_search": {
      "post": {
        "tags": [
          "AuditEvent"
        ],
        "summary": "Search AuditEvents",
        "description": "Search for `AuditEvents` with filtering capabilities.",
        "operationId": "AuditEventSearch",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of AuditEvents to return (default: 50) when searching AuditEvents",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                1
              ],
              "default": 50
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of AuditEvents to skip before starting to return results (default: 0) when searching AuditEvents",
            "required": false,
            "schema": {
              "type": "integer",
              "examples": [
                0
              ],
              "default": 0
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AuditEventSearch"
        },
        "responses": {
          "200": {
            "description": "Response for AuditEvent Search operation - returns filtered AuditEvent results",
            "$ref": "#/components/responses/AuditEventSearch"
          },
          "400": {
            "description": "Bad Request error for AuditEvent Search operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for AuditEvent Search operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for AuditEvent Search operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for AuditEvent Search operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for AuditEvent Search operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "422": {
            "description": "Validation error for AuditEvent Search operation - request data failed validation",
            "$ref": "#/components/responses/AuditEventSearch422ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for AuditEvent Search operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for AuditEvent Search operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "offset",
              "in": "parameters",
              "type": "offset"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.data.resultArray"
          }
        },
        "x-speakeasy-group": "auditEvents",
        "x-speakeasy-name-override": "search"
      }
    },
    "/audit-event/{id}": {
      "get": {
        "tags": [
          "AuditEvent"
        ],
        "summary": "Get a AuditEvent",
        "description": "Retrieves the `AuditEvent` with the given ID.",
        "operationId": "AuditEventGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the AuditEvent to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "123e4567-e89b-12d3-a456-426614174000"
              ],
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response for AuditEvent Get operation - returns the requested AuditEvent",
            "$ref": "#/components/responses/AuditEventGet"
          },
          "400": {
            "description": "Bad Request error for AuditEvent Get operation - request contains invalid parameters",
            "$ref": "#/components/responses/Error400ResponseBody"
          },
          "401": {
            "description": "Unauthorized error for AuditEvent Get operation - authentication required",
            "$ref": "#/components/responses/Error401ResponseBody"
          },
          "403": {
            "description": "Forbidden error for AuditEvent Get operation - insufficient permissions",
            "$ref": "#/components/responses/Error403ResponseBody"
          },
          "404": {
            "description": "Not Found error for AuditEvent Get operation - resource does not exist",
            "$ref": "#/components/responses/Error404ResponseBody"
          },
          "409": {
            "description": "Conflict error for AuditEvent Get operation - request conflicts with current state",
            "$ref": "#/components/responses/Error409ResponseBody"
          },
          "429": {
            "description": "Rate Limit error for AuditEvent Get operation - too many requests",
            "$ref": "#/components/responses/Error429ResponseBody"
          },
          "500": {
            "description": "Internal Server error for AuditEvent Get operation - unexpected server error",
            "$ref": "#/components/responses/Error500ResponseBody"
          }
        },
        "x-speakeasy-group": "auditEvents",
        "x-speakeasy-name-override": "get"
      }
    }
  },
  "components": {
    "schemas": {
      "AuditEventResource": {
        "type": "string",
        "enum": [
          "Group",
          "Guardian",
          "Employee",
          "EmployeePlacement",
          "Student",
          "StudentPlacement"
        ],
        "description": "The resource that was affected by the audit event"
      },
      "AuditEventType": {
        "type": "string",
        "enum": [
          "Delete"
        ],
        "description": "The type of the audit event"
      },
      "Gender": {
        "type": "string",
        "enum": [
          "Female",
          "Male",
          "Other"
        ],
        "description": "The gender of the person"
      },
      "GroupCategory": {
        "type": "string",
        "enum": [
          "Education",
          "Other"
        ],
        "description": "The category of the group"
      },
      "GroupType": {
        "type": "string",
        "enum": [
          "Class",
          "Childcare",
          "Mentor"
        ],
        "description": "The type of the group"
      },
      "EmployeePlacementRole": {
        "type": "string",
        "enum": [
          "Admin",
          "CareTeam",
          "Manager",
          "OtherPersonnel",
          "Scheduler",
          "Teacher"
        ],
        "description": "The role of the employee in the placement"
      },
      "SchoolYear": {
        "type": "string",
        "enum": [
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9"
        ],
        "description": "The school year the student is attending"
      },
      "SchoolType": {
        "type": "string",
        "enum": [
          "Grundskola",
          "Gymnasieskola",
          "Förskola"
        ],
        "description": "The type of schooling provided at the school"
      },
      "StudentPlacementSchoolType": {
        "type": "string",
        "enum": [
          "GR",
          "GRAN",
          "GY",
          "GYAN",
          "FS"
        ],
        "description": "The type of schooling the student is attending"
      },
      "ErrorCode": {
        "type": "string",
        "enum": [
          "BadRequest",
          "Unauthorized",
          "Forbidden",
          "NotFound",
          "Conflict",
          "UnprocessableEntity",
          "RateLimited",
          "Internal"
        ],
        "description": "Standard error codes used in API responses"
      },
      "Address": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "type": "string",
            "examples": [
              "Dalvägen 14",
              null
            ],
            "description": "The postal address of the address",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "examples": [
              "169 56",
              null
            ],
            "description": "The postal code of the address",
            "nullable": true
          },
          "postalCity": {
            "type": "string",
            "examples": [
              "Solna",
              null
            ],
            "description": "The city of the address",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "examples": [
              "SWE",
              null
            ],
            "description": "The country code of the address",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "0184",
              null
            ],
            "description": "The municipality code of the address",
            "nullable": true
          }
        },
        "description": "Address is a reusable object that can be used to store address information."
      },
      "External": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "string",
            "examples": [
              "12345678",
              null
            ],
            "description": "The ID of the external source",
            "nullable": true
          },
          "source": {
            "type": "string",
            "examples": [
              "ExternalIntegrationAPI",
              null
            ],
            "description": "The source of the external information",
            "nullable": true
          }
        },
        "description": "External is a reusable object that can be used to store external information from another system, used for third-party integration tracking."
      },
      "ExternalRequest": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "string",
            "examples": [
              "12345678"
            ],
            "description": "The ID of the external source"
          }
        },
        "required": [
          "sourceID"
        ],
        "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID, the Source-field is not included."
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorCode"
              }
            ],
            "description": "The specific error code indicating the type of error"
          },
          "message": {
            "type": "string",
            "examples": [
              "example"
            ],
            "description": "Human-readable error message providing additional details"
          },
          "requestID": {
            "type": "string",
            "examples": [
              "550e8400-e29b-41d4-a716-446655440000"
            ],
            "description": "Unique identifier for the request that generated this error, used for logging and debugging"
          }
        },
        "required": [
          "code",
          "message",
          "requestID"
        ],
        "description": "Standard error response object containing error code, message, and request ID"
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "examples": [
              0
            ],
            "description": "Number of items to skip from the beginning of the result set"
          },
          "limit": {
            "type": "integer",
            "examples": [
              1
            ],
            "description": "Maximum number of items to return in the result set"
          },
          "total": {
            "type": "integer",
            "examples": [
              100
            ],
            "description": "Total number of items available for pagination"
          }
        },
        "required": [
          "offset",
          "limit",
          "total"
        ],
        "description": "Pagination parameters for controlling result sets in list operations"
      },
      "Meta": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z"
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was created"
          },
          "createdBy": {
            "type": "string",
            "examples": [
              "987fcdeb-51a2-43d1-b567-123456789abc",
              null
            ],
            "format": "uuid",
            "description": "User who created the resource",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T14:45:00Z",
              null
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was last updated",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "examples": [
              "987fcdeb-51a2-43d1-b567-123456789abc",
              null
            ],
            "format": "uuid",
            "description": "User who last updated the resource",
            "nullable": true
          }
        },
        "required": [
          "createdAt"
        ],
        "description": "Meta contains information about the creation and modification of a resource for auditing purposes"
      },
      "School": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the School"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the School"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "Meitner Grundskola"
            ],
            "description": "The title of the school"
          },
          "unitCode": {
            "type": "string",
            "examples": [
              "12345678",
              null
            ],
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "nullable": true
          },
          "csnSchoolCode": {
            "type": "string",
            "examples": [
              "12345",
              null
            ],
            "description": "The School Code provided by CSN, required for reports to CSN",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "0184",
              null
            ],
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "nullable": true
          },
          "schoolType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolType"
              }
            ],
            "examples": [
              "Grundskola"
            ],
            "description": "Type of schooling provided at the school"
          }
        },
        "required": [
          "id",
          "title",
          "schoolType"
        ],
        "description": "The `School` resource represents a school where daily operations occur. A school must exist before you can create StudentPlacements, EmployeePlacements, or Groups.\n \nThis resource can be created, Updated, listed, retrieved, and deleted using the standard resource structure. It **does not** support search and filtering.\n"
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the Group"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the Group"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the school the group belongs to"
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupCategory"
              }
            ],
            "examples": [
              "Education"
            ],
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
            "default": "Education"
          },
          "title": {
            "type": "string",
            "examples": [
              "1A"
            ],
            "description": "The title of the group, must be unique within the school."
          },
          "types": {
            "type": "array",
            "examples": [
              [
                "Class"
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupType"
                }
              ]
            },
            "description": "The types of the group"
          },
          "moderatorIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n"
          },
          "memberIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n"
          }
        },
        "required": [
          "id",
          "schoolID",
          "title"
        ],
        "description": "Group holds the information about a group of students."
      },
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the Employee"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the Employee"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ],
            "examples": [
              "Female",
              null
            ],
            "description": "The gender of the employee",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "20191216-1234"
            ],
            "description": "The identity number of the employee, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "If the identity number is temporary for the employee",
            "default": false
          },
          "firstName": {
            "type": "string",
            "examples": [
              "Lise"
            ],
            "description": "The first name of the employee"
          },
          "lastName": {
            "type": "string",
            "examples": [
              "Meitner"
            ],
            "description": "The last name of the employee"
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2019-12-16",
              null
            ],
            "format": "date",
            "description": "The date of birth of the employee",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "examples": [
              {
                "postalAddress": "Dalvägen 14",
                "postalCode": "169 56",
                "postalCity": "Solna",
                "countryCode": "SWE",
                "municipalityCode": "0184"
              }
            ],
            "description": "The address of the employee"
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "lise@meitner.se",
              null
            ],
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "lise@gmail.com",
              null
            ],
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "+46701234567",
              null
            ],
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "+46701234567",
              null
            ],
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "description": "Employee holds the personal information about an employee in the organization."
      },
      "EmployeePlacement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the EmployeePlacement"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the EmployeePlacement"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "employeeID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the employee the placement belongs to"
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the school the placement belongs to"
          },
          "signature": {
            "type": "string",
            "examples": [
              "LM",
              null
            ],
            "description": "The signature of the employee",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "Principal",
              null
            ],
            "description": "The title of the employee",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "examples": [
              [
                "Admin"
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacementRole"
                }
              ]
            },
            "description": "The roles of the employee"
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-08-01"
            ],
            "format": "date",
            "description": "The start date of the placement for the employee"
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2024-08-01",
              null
            ],
            "format": "date",
            "description": "The end date of the placement for the employee",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "2024_2025",
              null
            ],
            "description": "The year the placement was archived for the employee, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-08-01T00:00:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the employee",
            "nullable": true
          }
        },
        "required": [
          "id",
          "employeeID",
          "schoolID",
          "startDate"
        ],
        "description": "EmployeePlacement holds the information about an employee's placement in a school."
      },
      "Guardian": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the Guardian"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the Guardian"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "20191216-1234"
            ],
            "description": "The identity number of the guardian, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "If the identity number is temporary for the guardian",
            "default": false
          },
          "firstName": {
            "type": "string",
            "examples": [
              "Lise"
            ],
            "description": "The first name of the guardian"
          },
          "lastName": {
            "type": "string",
            "examples": [
              "Meitner"
            ],
            "description": "The last name of the guardian"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "examples": [
              {
                "postalAddress": "Dalvägen 14",
                "postalCode": "169 56",
                "postalCity": "Solna",
                "countryCode": "SWE",
                "municipalityCode": "0184"
              }
            ],
            "description": "The address of the guardian"
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "lise@meitner.se",
              null
            ],
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "lise@gmail.com",
              null
            ],
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "+46701234567",
              null
            ],
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "+46701234567",
              null
            ],
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "studentIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the students the guardian is responsible for."
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "description": "Guardian holds the information about a guardian of a student."
      },
      "Student": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the Student"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the Student"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ],
            "examples": [
              "Female",
              null
            ],
            "description": "The gender of the student",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "20191216-1234"
            ],
            "description": "The identity number of the student, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "If the identity number is temporary for the student",
            "default": false
          },
          "firstName": {
            "type": "string",
            "examples": [
              "Lise"
            ],
            "description": "The first name of the student"
          },
          "lastName": {
            "type": "string",
            "examples": [
              "Meitner"
            ],
            "description": "The last name of the student"
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2019-12-16",
              null
            ],
            "format": "date",
            "description": "The date of birth of the student",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "examples": [
              {
                "postalAddress": "Dalvägen 14",
                "postalCode": "169 56",
                "postalCity": "Solna",
                "countryCode": "SWE",
                "municipalityCode": "0184"
              }
            ],
            "description": "The address of the student"
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "lise@meitner.se",
              null
            ],
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "lise@gmail.com",
              null
            ],
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "+46701234567",
              null
            ],
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "identityNumber",
          "firstName",
          "lastName"
        ],
        "description": "Student holds the personal information about a student, information about the school is stored in the StudentPlacement-resource."
      },
      "StudentPlacement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the StudentPlacement"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the StudentPlacement"
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/External"
              }
            ],
            "examples": [
              {
                "sourceID": "12345678",
                "source": "ExternalIntegrationAPI"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "studentID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the student the placement belongs to"
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the school the student is placed in"
          },
          "schoolType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementSchoolType"
              }
            ],
            "examples": [
              "GR"
            ],
            "description": "The school type for the student, if not provided on Create, the school type will be fetched from the school."
          },
          "schoolYear": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolYear"
              }
            ],
            "examples": [
              "1",
              null
            ],
            "description": "The school year the student is placed in",
            "nullable": true
          },
          "hasChildcare": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "Whether the student has childcare",
            "default": false
          },
          "motherTongue": {
            "type": "string",
            "examples": [
              "SWE",
              null
            ],
            "description": "The mother tongue of the student",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-08-01"
            ],
            "format": "date",
            "description": "The start date of the placement"
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2025-08-01",
              null
            ],
            "format": "date",
            "description": "The end date of the placement",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "2024_2025",
              null
            ],
            "description": "The year the placement was archived for the student, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-08-01T00:00:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the student",
            "nullable": true
          }
        },
        "required": [
          "id",
          "studentID",
          "schoolID",
          "schoolType",
          "startDate"
        ],
        "description": "StudentPlacement holds the placement information about a student in a specific school."
      },
      "AuditEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "Unique identifier for the AuditEvent"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Meta"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                "updatedAt": "2024-01-15T14:45:00Z",
                "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
              }
            ],
            "description": "Metadata information for the AuditEvent"
          },
          "timestamp": {
            "type": "string",
            "examples": [
              "2024-08-01T00:00:00Z"
            ],
            "format": "date-time",
            "description": "The timestamp of the event"
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventResource"
              }
            ],
            "examples": [
              "Student"
            ],
            "description": "The type of resource the event occured for"
          },
          "resourceID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "format": "uuid",
            "description": "The ID of the resource the event belongs to"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventType"
              }
            ],
            "examples": [
              "Delete"
            ],
            "description": "The type of the audit event"
          }
        },
        "required": [
          "id",
          "timestamp",
          "resource",
          "resourceID",
          "type"
        ],
        "description": "AuditEvent holds the information about an audit event."
      },
      "SchoolFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example",
                "unitCode": "example",
                "csnSchoolCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "Equality filters for School",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example",
                "unitCode": "example",
                "csnSchoolCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "Inequality filters for School",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than filters for School",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than filters for School",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than or equal filters for School",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than or equal filters for School",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "title": [
                  "example"
                ],
                "unitCode": [
                  "example"
                ],
                "csnSchoolCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for School",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "title": [
                  "example"
                ],
                "unitCode": [
                  "example"
                ],
                "csnSchoolCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for School",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example",
                "unitCode": "example",
                "csnSchoolCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "LIKE filters for School",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example",
                "unitCode": "example",
                "csnSchoolCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for School",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "unitCode": true,
                "csnSchoolCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "Null filters for School",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "unitCode": true,
                "csnSchoolCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "Not null filters for School",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "title": [
                      "example"
                    ],
                    "unitCode": [
                      "example"
                    ],
                    "csnSchoolCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "title": [
                      "example"
                    ],
                    "unitCode": [
                      "example"
                    ],
                    "csnSchoolCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "unitCode": true,
                    "csnSchoolCode": true,
                    "municipalityCode": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "unitCode": true,
                    "csnSchoolCode": true,
                    "municipalityCode": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchoolFilter"
                }
              ]
            },
            "description": "NestedFilters of the School, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for School"
      },
      "SchoolFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the School",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the School",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the school",
            "nullable": true
          },
          "unitCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "nullable": true
          },
          "csnSchoolCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The School Code provided by CSN, required for reports to CSN",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "nullable": true
          },
          "schoolType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolType"
              }
            ],
            "description": "Type of schooling provided at the school",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for School"
      },
      "SchoolFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the School",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          }
        },
        "description": "Range filter fields for School"
      },
      "SchoolFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the School"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the School",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "title": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The title of the school"
          },
          "unitCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents"
          },
          "csnSchoolCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The School Code provided by CSN, required for reports to CSN"
          },
          "municipalityCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "Municipality code of the school, is used in reports and printed on grade documents"
          },
          "schoolType": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchoolType"
                }
              ]
            },
            "description": "Type of schooling provided at the school"
          }
        },
        "description": "Contains filter fields for School"
      },
      "SchoolFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the School",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the school",
            "nullable": true
          },
          "unitCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "nullable": true
          },
          "csnSchoolCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The School Code provided by CSN, required for reports to CSN",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for School"
      },
      "SchoolFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the School",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the school from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "unitCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
            "nullable": true
          },
          "csnSchoolCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The School Code provided by CSN, required for reports to CSN",
            "nullable": true
          },
          "municipalityCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "Municipality code of the school, is used in reports and printed on grade documents",
            "nullable": true
          }
        },
        "description": "Null filter fields for School"
      },
      "GroupFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "title": "example",
                "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Equality filters for Group",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "title": "example",
                "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Inequality filters for Group",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than filters for Group",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than filters for Group",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than or equal filters for Group",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than or equal filters for Group",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "title": [
                  "example"
                ],
                "moderatorIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "memberIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Contains filters for Group",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "title": [
                  "example"
                ],
                "moderatorIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "memberIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Not contains filters for Group",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example"
              },
              null
            ],
            "description": "LIKE filters for Group",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "title": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for Group",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "types": true,
                "moderatorIDs": true,
                "memberIDs": true
              },
              null
            ],
            "description": "Null filters for Group",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "types": true,
                "moderatorIDs": true,
                "memberIDs": true
              },
              null
            ],
            "description": "Not null filters for Group",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "title": "example",
                    "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                    "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "title": "example",
                    "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                    "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "title": [
                      "example"
                    ],
                    "moderatorIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "memberIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "title": [
                      "example"
                    ],
                    "moderatorIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "memberIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "types": true,
                    "moderatorIDs": true,
                    "memberIDs": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "types": true,
                    "moderatorIDs": true,
                    "memberIDs": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupFilter"
                }
              ]
            },
            "description": "NestedFilters of the Group, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Group"
      },
      "GroupFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the Group",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the Group",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the school the group belongs to",
            "nullable": true
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupCategory"
              }
            ],
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the group, must be unique within the school.",
            "nullable": true
          },
          "types": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupType"
              }
            ],
            "description": "The types of the group",
            "nullable": true
          },
          "moderatorIDs": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "nullable": true
          },
          "memberIDs": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Group"
      },
      "GroupFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the Group",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          }
        },
        "description": "Range filter fields for Group"
      },
      "GroupFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the Group"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the Group",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "schoolID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the school the group belongs to"
          },
          "category": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupCategory"
                }
              ]
            },
            "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n"
          },
          "title": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The title of the group, must be unique within the school."
          },
          "types": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupType"
                }
              ]
            },
            "description": "The types of the group"
          },
          "moderatorIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n"
          },
          "memberIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n"
          }
        },
        "description": "Contains filter fields for Group"
      },
      "GroupFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the Group",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the group, must be unique within the school.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for Group"
      },
      "GroupFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the Group",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "types": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The types of the group",
            "nullable": true
          },
          "moderatorIDs": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n",
            "nullable": true
          },
          "memberIDs": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n",
            "nullable": true
          }
        },
        "description": "Null filter fields for Group"
      },
      "EmployeeFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "dateOfBirth": "2024-01-15",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "Equality filters for Employee",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "dateOfBirth": "2024-01-15",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "Inequality filters for Employee",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Greater than filters for Employee",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Smaller than filters for Employee",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Greater than or equal filters for Employee",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Smaller than or equal filters for Employee",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "dateOfBirth": [
                  "2024-01-15"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for Employee",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "dateOfBirth": [
                  "2024-01-15"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for Employee",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "LIKE filters for Employee",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for Employee",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "gender": true,
                "dateOfBirth": true,
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true
              },
              null
            ],
            "description": "Null filters for Employee",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeeFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "gender": true,
                "dateOfBirth": true,
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true
              },
              null
            ],
            "description": "Not null filters for Employee",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeeFilter"
                }
              ]
            },
            "description": "NestedFilters of the Employee, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Employee"
      },
      "EmployeeFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the Employee",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the Employee",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ],
            "description": "The gender of the employee",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the employee, must be unique within the organization.",
            "nullable": true
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "If the identity number is temporary for the employee",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the employee",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the employee",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The date of birth of the employee",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterEquals"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the employee",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Employee"
      },
      "EmployeeFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the Employee",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The date of birth of the employee",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the employee",
            "nullable": true
          }
        },
        "description": "Range filter fields for Employee"
      },
      "EmployeeFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the Employee"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the Employee",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Gender"
                }
              ]
            },
            "description": "The gender of the employee"
          },
          "identityNumber": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The identity number of the employee, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "array",
            "examples": [
              [
                true
              ]
            ],
            "items": {
              "type": "boolean"
            },
            "description": "If the identity number is temporary for the employee"
          },
          "firstName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The first name of the employee"
          },
          "lastName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The last name of the employee"
          },
          "dateOfBirth": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The date of birth of the employee"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "examples": [
              {
                "postalAddress": [
                  "example"
                ],
                "postalCode": [
                  "example"
                ],
                "postalCity": [
                  "example"
                ],
                "countryCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "The address of the employee",
            "nullable": true
          },
          "emailAddress1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n"
          },
          "emailAddress2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information."
          },
          "phoneNumber1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization."
          },
          "phoneNumber2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information."
          }
        },
        "description": "Contains filter fields for Employee"
      },
      "EmployeeFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the Employee",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the employee, must be unique within the organization.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the employee",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the employee",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the employee",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for Employee"
      },
      "EmployeeFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the Employee",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the employee placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The gender of the employee",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The date of birth of the employee",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "examples": [
              {
                "postalAddress": true,
                "postalCode": true,
                "postalCity": true,
                "countryCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "The address of the employee",
            "nullable": true
          },
          "emailAddress1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "Null filter fields for Employee"
      },
      "EmployeePlacementFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "signature": "example",
                "title": "example",
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archiveYear": "example",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Equality filters for EmployeePlacement",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "signature": "example",
                "title": "example",
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archiveYear": "example",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Inequality filters for EmployeePlacement",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than filters for EmployeePlacement",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than filters for EmployeePlacement",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than or equal filters for EmployeePlacement",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than or equal filters for EmployeePlacement",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "employeeID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "signature": [
                  "example"
                ],
                "title": [
                  "example"
                ],
                "startDate": [
                  "2024-01-15"
                ],
                "endDate": [
                  "2024-01-15"
                ],
                "archiveYear": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for EmployeePlacement",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "employeeID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "signature": [
                  "example"
                ],
                "title": [
                  "example"
                ],
                "startDate": [
                  "2024-01-15"
                ],
                "endDate": [
                  "2024-01-15"
                ],
                "archiveYear": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for EmployeePlacement",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "signature": "example",
                "title": "example",
                "archiveYear": "example"
              },
              null
            ],
            "description": "LIKE filters for EmployeePlacement",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "signature": "example",
                "title": "example",
                "archiveYear": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for EmployeePlacement",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "signature": true,
                "title": true,
                "roles": true,
                "endDate": true,
                "archiveYear": true,
                "archivedAt": true
              },
              null
            ],
            "description": "Null filters for EmployeePlacement",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "signature": true,
                "title": true,
                "roles": true,
                "endDate": true,
                "archiveYear": true,
                "archivedAt": true
              },
              null
            ],
            "description": "Not null filters for EmployeePlacement",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "signature": "example",
                    "title": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "signature": "example",
                    "title": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "employeeID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "signature": [
                      "example"
                    ],
                    "title": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "employeeID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "signature": [
                      "example"
                    ],
                    "title": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "signature": "example",
                    "title": "example",
                    "archiveYear": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "signature": "example",
                    "title": "example",
                    "archiveYear": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "signature": true,
                    "title": true,
                    "roles": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "signature": true,
                    "title": true,
                    "roles": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacementFilter"
                }
              ]
            },
            "description": "NestedFilters of the EmployeePlacement, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for EmployeePlacement"
      },
      "EmployeePlacementFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the EmployeePlacement",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the EmployeePlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "employeeID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the employee the placement belongs to",
            "nullable": true
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the school the placement belongs to",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The signature of the employee",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the employee",
            "nullable": true
          },
          "roles": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmployeePlacementRole"
              }
            ],
            "description": "The roles of the employee",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The start date of the placement for the employee",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The end date of the placement for the employee",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The year the placement was archived for the employee, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the employee",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for EmployeePlacement"
      },
      "EmployeePlacementFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the EmployeePlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The start date of the placement for the employee",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The end date of the placement for the employee",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the employee",
            "nullable": true
          }
        },
        "description": "Range filter fields for EmployeePlacement"
      },
      "EmployeePlacementFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the EmployeePlacement"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the EmployeePlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "employeeID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the employee the placement belongs to"
          },
          "schoolID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the school the placement belongs to"
          },
          "signature": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The signature of the employee"
          },
          "title": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The title of the employee"
          },
          "roles": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacementRole"
                }
              ]
            },
            "description": "The roles of the employee"
          },
          "startDate": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The start date of the placement for the employee"
          },
          "endDate": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The end date of the placement for the employee"
          },
          "archiveYear": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The year the placement was archived for the employee, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring."
          }
        },
        "description": "Contains filter fields for EmployeePlacement"
      },
      "EmployeePlacementFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the EmployeePlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The signature of the employee",
            "nullable": true
          },
          "title": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The title of the employee",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The year the placement was archived for the employee, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for EmployeePlacement"
      },
      "EmployeePlacementFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the EmployeePlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "signature": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The signature of the employee",
            "nullable": true
          },
          "title": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The title of the employee",
            "nullable": true
          },
          "roles": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The roles of the employee",
            "nullable": true
          },
          "endDate": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The end date of the placement for the employee",
            "nullable": true
          },
          "archiveYear": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The year the placement was archived for the employee, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The timestamp the placement was archived for the employee",
            "nullable": true
          }
        },
        "description": "Null filter fields for EmployeePlacement"
      },
      "GuardianFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example",
                "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Equality filters for Guardian",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example",
                "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Inequality filters for Guardian",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than filters for Guardian",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than filters for Guardian",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Greater than or equal filters for Guardian",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              },
              null
            ],
            "description": "Smaller than or equal filters for Guardian",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ],
                "studentIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Contains filters for Guardian",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ],
                "studentIDs": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Not contains filters for Guardian",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "LIKE filters for Guardian",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for Guardian",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true,
                "studentIDs": true
              },
              null
            ],
            "description": "Null filters for Guardian",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuardianFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true,
                "studentIDs": true
              },
              null
            ],
            "description": "Not null filters for Guardian",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example",
                    "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example",
                    "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ],
                    "studentIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ],
                    "studentIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true,
                    "studentIDs": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true,
                    "studentIDs": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GuardianFilter"
                }
              ]
            },
            "description": "NestedFilters of the Guardian, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Guardian"
      },
      "GuardianFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the Guardian",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the Guardian",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the guardian, must be unique within the organization.",
            "nullable": true
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "If the identity number is temporary for the guardian",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the guardian",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the guardian",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterEquals"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the guardian",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "studentIDs": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The IDs of the students the guardian is responsible for.",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Guardian"
      },
      "GuardianFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the Guardian",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the guardian",
            "nullable": true
          }
        },
        "description": "Range filter fields for Guardian"
      },
      "GuardianFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the Guardian"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the Guardian",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The identity number of the guardian, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "array",
            "examples": [
              [
                true
              ]
            ],
            "items": {
              "type": "boolean"
            },
            "description": "If the identity number is temporary for the guardian"
          },
          "firstName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The first name of the guardian"
          },
          "lastName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The last name of the guardian"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "examples": [
              {
                "postalAddress": [
                  "example"
                ],
                "postalCode": [
                  "example"
                ],
                "postalCity": [
                  "example"
                ],
                "countryCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "The address of the guardian",
            "nullable": true
          },
          "emailAddress1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n"
          },
          "emailAddress2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information."
          },
          "phoneNumber1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system."
          },
          "phoneNumber2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information."
          },
          "studentIDs": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of the students the guardian is responsible for."
          }
        },
        "description": "Contains filter fields for Guardian"
      },
      "GuardianFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the Guardian",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the guardian, must be unique within the organization.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the guardian",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the guardian",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the guardian",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for Guardian"
      },
      "GuardianFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the Guardian",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the guardian from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "examples": [
              {
                "postalAddress": true,
                "postalCode": true,
                "postalCity": true,
                "countryCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "The address of the guardian",
            "nullable": true
          },
          "emailAddress1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "studentIDs": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The IDs of the students the guardian is responsible for.",
            "nullable": true
          }
        },
        "description": "Null filter fields for Guardian"
      },
      "StudentFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "dateOfBirth": "2024-01-15",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "Equality filters for Student",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "identityTemporary": true,
                "firstName": "example",
                "lastName": "example",
                "dateOfBirth": "2024-01-15",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "Inequality filters for Student",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Greater than filters for Student",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Smaller than filters for Student",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Greater than or equal filters for Student",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "dateOfBirth": "2024-01-15"
              },
              null
            ],
            "description": "Smaller than or equal filters for Student",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "dateOfBirth": [
                  "2024-01-15"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for Student",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "identityNumber": [
                  "example"
                ],
                "identityTemporary": [
                  true
                ],
                "firstName": [
                  "example"
                ],
                "lastName": [
                  "example"
                ],
                "dateOfBirth": [
                  "2024-01-15"
                ],
                "address": {
                  "postalAddress": [
                    "example"
                  ],
                  "postalCode": [
                    "example"
                  ],
                  "postalCity": [
                    "example"
                  ],
                  "countryCode": [
                    "example"
                  ],
                  "municipalityCode": [
                    "example"
                  ]
                },
                "emailAddress1": [
                  "example"
                ],
                "emailAddress2": [
                  "example"
                ],
                "phoneNumber1": [
                  "example"
                ],
                "phoneNumber2": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for Student",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "LIKE filters for Student",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "identityNumber": "example",
                "firstName": "example",
                "lastName": "example",
                "address": {
                  "postalAddress": "example",
                  "postalCode": "example",
                  "postalCity": "example",
                  "countryCode": "example",
                  "municipalityCode": "example"
                },
                "emailAddress1": "example",
                "emailAddress2": "example",
                "phoneNumber1": "example",
                "phoneNumber2": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for Student",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "gender": true,
                "dateOfBirth": true,
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true
              },
              null
            ],
            "description": "Null filters for Student",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "gender": true,
                "dateOfBirth": true,
                "address": {
                  "postalAddress": true,
                  "postalCode": true,
                  "postalCity": true,
                  "countryCode": true,
                  "municipalityCode": true
                },
                "emailAddress1": true,
                "emailAddress2": true,
                "phoneNumber1": true,
                "phoneNumber2": true
              },
              null
            ],
            "description": "Not null filters for Student",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentFilter"
                }
              ]
            },
            "description": "NestedFilters of the Student, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Student"
      },
      "StudentFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the Student",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the Student",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Gender"
              }
            ],
            "description": "The gender of the student",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the student, must be unique within the organization.",
            "nullable": true
          },
          "identityTemporary": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "If the identity number is temporary for the student",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the student",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the student",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The date of birth of the student",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterEquals"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the student",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Student"
      },
      "StudentFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the Student",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The date of birth of the student",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "The address of the student",
            "nullable": true
          }
        },
        "description": "Range filter fields for Student"
      },
      "StudentFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the Student"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the Student",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Gender"
                }
              ]
            },
            "description": "The gender of the student"
          },
          "identityNumber": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The identity number of the student, must be unique within the organization."
          },
          "identityTemporary": {
            "type": "array",
            "examples": [
              [
                true
              ]
            ],
            "items": {
              "type": "boolean"
            },
            "description": "If the identity number is temporary for the student"
          },
          "firstName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The first name of the student"
          },
          "lastName": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The last name of the student"
          },
          "dateOfBirth": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The date of birth of the student"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "examples": [
              {
                "postalAddress": [
                  "example"
                ],
                "postalCode": [
                  "example"
                ],
                "postalCity": [
                  "example"
                ],
                "countryCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "The address of the student",
            "nullable": true
          },
          "emailAddress1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n"
          },
          "emailAddress2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information."
          },
          "phoneNumber1": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The primary phone number of the student, will be used for communication with the student from the system."
          },
          "phoneNumber2": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information."
          }
        },
        "description": "Contains filter fields for Student"
      },
      "StudentFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the Student",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "identityNumber": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The identity number of the student, must be unique within the organization.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The first name of the student",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The last name of the student",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "The address of the student",
            "nullable": true
          },
          "emailAddress1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for Student"
      },
      "StudentFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the Student",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "gender": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The gender of the student",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The date of birth of the student",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "examples": [
              {
                "postalAddress": true,
                "postalCode": true,
                "postalCity": true,
                "countryCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "The address of the student",
            "nullable": true
          },
          "emailAddress1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
            "nullable": true
          },
          "emailAddress2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          },
          "phoneNumber1": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The primary phone number of the student, will be used for communication with the student from the system.",
            "nullable": true
          },
          "phoneNumber2": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
            "nullable": true
          }
        },
        "description": "Null filter fields for Student"
      },
      "StudentPlacementFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "studentID": "123e4567-e89b-12d3-a456-426614174000",
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "hasChildcare": true,
                "motherTongue": "example",
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archiveYear": "example",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Equality filters for StudentPlacement",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "studentID": "123e4567-e89b-12d3-a456-426614174000",
                "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                "hasChildcare": true,
                "motherTongue": "example",
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archiveYear": "example",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Inequality filters for StudentPlacement",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than filters for StudentPlacement",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than filters for StudentPlacement",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than or equal filters for StudentPlacement",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "startDate": "2024-01-15",
                "endDate": "2024-01-15",
                "archivedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than or equal filters for StudentPlacement",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "studentID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "hasChildcare": [
                  true
                ],
                "motherTongue": [
                  "example"
                ],
                "startDate": [
                  "2024-01-15"
                ],
                "endDate": [
                  "2024-01-15"
                ],
                "archiveYear": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for StudentPlacement",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "external": {
                  "sourceID": [
                    "example"
                  ],
                  "source": [
                    "example"
                  ]
                },
                "studentID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "schoolID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "hasChildcare": [
                  true
                ],
                "motherTongue": [
                  "example"
                ],
                "startDate": [
                  "2024-01-15"
                ],
                "endDate": [
                  "2024-01-15"
                ],
                "archiveYear": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for StudentPlacement",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "motherTongue": "example",
                "archiveYear": "example"
              },
              null
            ],
            "description": "LIKE filters for StudentPlacement",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterLike"
              }
            ],
            "examples": [
              {
                "external": {
                  "sourceID": "example",
                  "source": "example"
                },
                "motherTongue": "example",
                "archiveYear": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for StudentPlacement",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "schoolYear": true,
                "motherTongue": true,
                "endDate": true,
                "archiveYear": true,
                "archivedAt": true
              },
              null
            ],
            "description": "Null filters for StudentPlacement",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                },
                "external": {
                  "sourceID": true,
                  "source": true
                },
                "schoolYear": true,
                "motherTongue": true,
                "endDate": true,
                "archiveYear": true,
                "archivedAt": true
              },
              null
            ],
            "description": "Not null filters for StudentPlacement",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "studentID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "hasChildcare": true,
                    "motherTongue": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "studentID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "hasChildcare": true,
                    "motherTongue": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "studentID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "hasChildcare": [
                      true
                    ],
                    "motherTongue": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "studentID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "hasChildcare": [
                      true
                    ],
                    "motherTongue": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "motherTongue": "example",
                    "archiveYear": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "motherTongue": "example",
                    "archiveYear": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "schoolYear": true,
                    "motherTongue": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "schoolYear": true,
                    "motherTongue": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacementFilter"
                }
              ]
            },
            "description": "NestedFilters of the StudentPlacement, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for StudentPlacement"
      },
      "StudentPlacementFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the StudentPlacement",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the StudentPlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "studentID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the student the placement belongs to",
            "nullable": true
          },
          "schoolID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the school the student is placed in",
            "nullable": true
          },
          "schoolType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentPlacementSchoolType"
              }
            ],
            "description": "The school type for the student, if not provided on Create, the school type will be fetched from the school.",
            "nullable": true
          },
          "schoolYear": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SchoolYear"
              }
            ],
            "description": "The school year the student is placed in",
            "nullable": true
          },
          "hasChildcare": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "Whether the student has childcare",
            "nullable": true
          },
          "motherTongue": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The mother tongue of the student",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The start date of the placement",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The end date of the placement",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The year the placement was archived for the student, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the student",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for StudentPlacement"
      },
      "StudentPlacementFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the StudentPlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The start date of the placement",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "examples": [
              "2024-01-15",
              null
            ],
            "format": "date",
            "description": "The end date of the placement",
            "nullable": true
          },
          "archivedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp the placement was archived for the student",
            "nullable": true
          }
        },
        "description": "Range filter fields for StudentPlacement"
      },
      "StudentPlacementFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the StudentPlacement"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the StudentPlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "studentID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the student the placement belongs to"
          },
          "schoolID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the school the student is placed in"
          },
          "schoolType": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacementSchoolType"
                }
              ]
            },
            "description": "The school type for the student, if not provided on Create, the school type will be fetched from the school."
          },
          "schoolYear": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchoolYear"
                }
              ]
            },
            "description": "The school year the student is placed in"
          },
          "hasChildcare": {
            "type": "array",
            "examples": [
              [
                true
              ]
            ],
            "items": {
              "type": "boolean"
            },
            "description": "Whether the student has childcare"
          },
          "motherTongue": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The mother tongue of the student"
          },
          "startDate": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The start date of the placement"
          },
          "endDate": {
            "type": "array",
            "examples": [
              [
                "2024-01-15"
              ]
            ],
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The end date of the placement"
          },
          "archiveYear": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The year the placement was archived for the student, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring."
          }
        },
        "description": "Contains filter fields for StudentPlacement"
      },
      "StudentPlacementFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the StudentPlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "motherTongue": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The mother tongue of the student",
            "nullable": true
          },
          "archiveYear": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The year the placement was archived for the student, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for StudentPlacement"
      },
      "StudentPlacementFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the StudentPlacement",
            "nullable": true
          },
          "external": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "External is a reusable object that can be used to store external information about the student placement from another system, used for third-party integration tracking.",
            "nullable": true
          },
          "schoolYear": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The school year the student is placed in",
            "nullable": true
          },
          "motherTongue": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The mother tongue of the student",
            "nullable": true
          },
          "endDate": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The end date of the placement",
            "nullable": true
          },
          "archiveYear": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The year the placement was archived for the student, in the format YYYY_YYYY where the first year is the autumn and the second year is the spring.",
            "nullable": true
          },
          "archivedAt": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The timestamp the placement was archived for the student",
            "nullable": true
          }
        },
        "description": "Null filter fields for StudentPlacement"
      },
      "AuditEventFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "timestamp": "2024-01-15T10:30:00Z",
                "resourceID": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Equality filters for AuditEvent",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterEquals"
              }
            ],
            "examples": [
              {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                  "updatedAt": "2024-01-15T10:30:00Z",
                  "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                },
                "timestamp": "2024-01-15T10:30:00Z",
                "resourceID": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Inequality filters for AuditEvent",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "timestamp": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than filters for AuditEvent",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "timestamp": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than filters for AuditEvent",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "timestamp": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than or equal filters for AuditEvent",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterRange"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                },
                "timestamp": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than or equal filters for AuditEvent",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "resourceID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Contains filters for AuditEvent",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterContains"
              }
            ],
            "examples": [
              {
                "id": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "meta": {
                  "createdBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "updatedBy": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                },
                "resourceID": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Not contains filters for AuditEvent",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterLike"
              }
            ],
            "description": "LIKE filters for AuditEvent",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterLike"
              }
            ],
            "description": "NOT LIKE filters for AuditEvent",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                }
              },
              null
            ],
            "description": "Null filters for AuditEvent",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventFilterNull"
              }
            ],
            "examples": [
              {
                "meta": {
                  "createdBy": true,
                  "updatedAt": true,
                  "updatedBy": true
                }
              },
              null
            ],
            "description": "Not null filters for AuditEvent",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "timestamp": "2024-01-15T10:30:00Z",
                    "resourceID": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "timestamp": "2024-01-15T10:30:00Z",
                    "resourceID": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "resourceID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "resourceID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    }
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    }
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEventFilter"
                }
              ]
            },
            "description": "NestedFilters of the AuditEvent, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for AuditEvent"
      },
      "AuditEventFilterEquals": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "Unique identifier for the AuditEvent",
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Metadata information for the AuditEvent",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp of the event",
            "nullable": true
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventResource"
              }
            ],
            "description": "The type of resource the event occured for",
            "nullable": true
          },
          "resourceID": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "The ID of the resource the event belongs to",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AuditEventType"
              }
            ],
            "description": "The type of the audit event",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for AuditEvent"
      },
      "AuditEventFilterRange": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Metadata information for the AuditEvent",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "The timestamp of the event",
            "nullable": true
          }
        },
        "description": "Range filter fields for AuditEvent"
      },
      "AuditEventFilterContains": {
        "type": "object",
        "properties": {
          "id": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique identifier for the AuditEvent"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Metadata information for the AuditEvent",
            "nullable": true
          },
          "resource": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEventResource"
                }
              ]
            },
            "description": "The type of resource the event occured for"
          },
          "resourceID": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ID of the resource the event belongs to"
          },
          "type": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEventType"
                }
              ]
            },
            "description": "The type of the audit event"
          }
        },
        "description": "Contains filter fields for AuditEvent"
      },
      "AuditEventFilterLike": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "Metadata information for the AuditEvent",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for AuditEvent"
      },
      "AuditEventFilterNull": {
        "type": "object",
        "properties": {
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Metadata information for the AuditEvent",
            "nullable": true
          }
        },
        "description": "Null filter fields for AuditEvent"
      },
      "MetaFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Equality filters for Meta",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterEquals"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                "updatedAt": "2024-01-15T10:30:00Z",
                "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
              },
              null
            ],
            "description": "Inequality filters for Meta",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than filters for Meta",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than filters for Meta",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Greater than or equal filters for Meta",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterRange"
              }
            ],
            "examples": [
              {
                "createdAt": "2024-01-15T10:30:00Z",
                "updatedAt": "2024-01-15T10:30:00Z"
              },
              null
            ],
            "description": "Smaller than or equal filters for Meta",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Contains filters for Meta",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterContains"
              }
            ],
            "examples": [
              {
                "createdBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ],
                "updatedBy": [
                  "123e4567-e89b-12d3-a456-426614174000"
                ]
              },
              null
            ],
            "description": "Not contains filters for Meta",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "LIKE filters for Meta",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterLike"
              }
            ],
            "description": "NOT LIKE filters for Meta",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Null filters for Meta",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetaFilterNull"
              }
            ],
            "examples": [
              {
                "createdBy": true,
                "updatedAt": true,
                "updatedBy": true
              },
              null
            ],
            "description": "Not null filters for Meta",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                    "updatedAt": "2024-01-15T10:30:00Z",
                    "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                    "updatedAt": "2024-01-15T10:30:00Z",
                    "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "createdBy": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "updatedBy": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "createdBy": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "updatedBy": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "null": {
                    "createdBy": true,
                    "updatedAt": true,
                    "updatedBy": true
                  },
                  "notNull": {
                    "createdBy": true,
                    "updatedAt": true,
                    "updatedBy": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MetaFilter"
                }
              ]
            },
            "description": "NestedFilters of the Meta, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Meta"
      },
      "MetaFilterEquals": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was created",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "User who created the resource",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was last updated",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "examples": [
              "123e4567-e89b-12d3-a456-426614174000",
              null
            ],
            "format": "uuid",
            "description": "User who last updated the resource",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Meta"
      },
      "MetaFilterRange": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was created",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "examples": [
              "2024-01-15T10:30:00Z",
              null
            ],
            "format": "date-time",
            "description": "Timestamp when the resource was last updated",
            "nullable": true
          }
        },
        "description": "Range filter fields for Meta"
      },
      "MetaFilterContains": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User who created the resource"
          },
          "updatedBy": {
            "type": "array",
            "examples": [
              [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            ],
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User who last updated the resource"
          }
        },
        "description": "Contains filter fields for Meta"
      },
      "MetaFilterLike": {
        "type": "object",
        "description": "LIKE filter fields for Meta"
      },
      "MetaFilterNull": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "User who created the resource",
            "nullable": true
          },
          "updatedAt": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "Timestamp when the resource was last updated",
            "nullable": true
          },
          "updatedBy": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "User who last updated the resource",
            "nullable": true
          }
        },
        "description": "Null filter fields for Meta"
      },
      "ExternalFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "Equality filters for External",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterEquals"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "Inequality filters for External",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "Greater than filters for External",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "Smaller than filters for External",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "Greater than or equal filters for External",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterRange"
              }
            ],
            "description": "Smaller than or equal filters for External",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for External",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterContains"
              }
            ],
            "examples": [
              {
                "sourceID": [
                  "example"
                ],
                "source": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for External",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "LIKE filters for External",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterLike"
              }
            ],
            "examples": [
              {
                "sourceID": "example",
                "source": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for External",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "Null filters for External",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFilterNull"
              }
            ],
            "examples": [
              {
                "sourceID": true,
                "source": true
              },
              null
            ],
            "description": "Not null filters for External",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "sourceID": "example",
                    "source": "example"
                  },
                  "notEquals": {
                    "sourceID": "example",
                    "source": "example"
                  },
                  "contains": {
                    "sourceID": [
                      "example"
                    ],
                    "source": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "sourceID": [
                      "example"
                    ],
                    "source": [
                      "example"
                    ]
                  },
                  "like": {
                    "sourceID": "example",
                    "source": "example"
                  },
                  "notLike": {
                    "sourceID": "example",
                    "source": "example"
                  },
                  "null": {
                    "sourceID": true,
                    "source": true
                  },
                  "notNull": {
                    "sourceID": true,
                    "source": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalFilter"
                }
              ]
            },
            "description": "NestedFilters of the External, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for External"
      },
      "ExternalFilterEquals": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The ID of the external source",
            "nullable": true
          },
          "source": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The source of the external information",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for External"
      },
      "ExternalFilterRange": {
        "type": "object",
        "description": "Range filter fields for External"
      },
      "ExternalFilterContains": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The ID of the external source"
          },
          "source": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The source of the external information"
          }
        },
        "description": "Contains filter fields for External"
      },
      "ExternalFilterLike": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The ID of the external source",
            "nullable": true
          },
          "source": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The source of the external information",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for External"
      },
      "ExternalFilterNull": {
        "type": "object",
        "properties": {
          "sourceID": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The ID of the external source",
            "nullable": true
          },
          "source": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The source of the external information",
            "nullable": true
          }
        },
        "description": "Null filter fields for External"
      },
      "AddressFilter": {
        "type": "object",
        "properties": {
          "equals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterEquals"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "Equality filters for Address",
            "nullable": true
          },
          "notEquals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterEquals"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "Inequality filters for Address",
            "nullable": true
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "Greater than filters for Address",
            "nullable": true
          },
          "smallerThan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "Smaller than filters for Address",
            "nullable": true
          },
          "greaterOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "Greater than or equal filters for Address",
            "nullable": true
          },
          "smallerOrEqual": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterRange"
              }
            ],
            "description": "Smaller than or equal filters for Address",
            "nullable": true
          },
          "contains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "examples": [
              {
                "postalAddress": [
                  "example"
                ],
                "postalCode": [
                  "example"
                ],
                "postalCity": [
                  "example"
                ],
                "countryCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "Contains filters for Address",
            "nullable": true
          },
          "notContains": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterContains"
              }
            ],
            "examples": [
              {
                "postalAddress": [
                  "example"
                ],
                "postalCode": [
                  "example"
                ],
                "postalCity": [
                  "example"
                ],
                "countryCode": [
                  "example"
                ],
                "municipalityCode": [
                  "example"
                ]
              },
              null
            ],
            "description": "Not contains filters for Address",
            "nullable": true
          },
          "like": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "LIKE filters for Address",
            "nullable": true
          },
          "notLike": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterLike"
              }
            ],
            "examples": [
              {
                "postalAddress": "example",
                "postalCode": "example",
                "postalCity": "example",
                "countryCode": "example",
                "municipalityCode": "example"
              },
              null
            ],
            "description": "NOT LIKE filters for Address",
            "nullable": true
          },
          "null": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "examples": [
              {
                "postalAddress": true,
                "postalCode": true,
                "postalCity": true,
                "countryCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "Null filters for Address",
            "nullable": true
          },
          "notNull": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressFilterNull"
              }
            ],
            "examples": [
              {
                "postalAddress": true,
                "postalCode": true,
                "postalCity": true,
                "countryCode": true,
                "municipalityCode": true
              },
              null
            ],
            "description": "Not null filters for Address",
            "nullable": true
          },
          "orCondition": {
            "type": "boolean",
            "examples": [
              true
            ],
            "description": "OrCondition decides if this filter is within an OR-condition or AND-condition"
          },
          "nestedFilters": {
            "type": "array",
            "examples": [
              [
                {
                  "equals": {
                    "postalAddress": "example",
                    "postalCode": "example",
                    "postalCity": "example",
                    "countryCode": "example",
                    "municipalityCode": "example"
                  },
                  "notEquals": {
                    "postalAddress": "example",
                    "postalCode": "example",
                    "postalCity": "example",
                    "countryCode": "example",
                    "municipalityCode": "example"
                  },
                  "contains": {
                    "postalAddress": [
                      "example"
                    ],
                    "postalCode": [
                      "example"
                    ],
                    "postalCity": [
                      "example"
                    ],
                    "countryCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "postalAddress": [
                      "example"
                    ],
                    "postalCode": [
                      "example"
                    ],
                    "postalCity": [
                      "example"
                    ],
                    "countryCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "like": {
                    "postalAddress": "example",
                    "postalCode": "example",
                    "postalCity": "example",
                    "countryCode": "example",
                    "municipalityCode": "example"
                  },
                  "notLike": {
                    "postalAddress": "example",
                    "postalCode": "example",
                    "postalCity": "example",
                    "countryCode": "example",
                    "municipalityCode": "example"
                  },
                  "null": {
                    "postalAddress": true,
                    "postalCode": true,
                    "postalCity": true,
                    "countryCode": true,
                    "municipalityCode": true
                  },
                  "notNull": {
                    "postalAddress": true,
                    "postalCode": true,
                    "postalCity": true,
                    "countryCode": true,
                    "municipalityCode": true
                  },
                  "orCondition": true
                }
              ]
            ],
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AddressFilter"
                }
              ]
            },
            "description": "NestedFilters of the Address, useful for more complex filters"
          }
        },
        "required": [
          "orCondition"
        ],
        "description": "Filter object for Address"
      },
      "AddressFilterEquals": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The postal address of the address",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The postal code of the address",
            "nullable": true
          },
          "postalCity": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The city of the address",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The country code of the address",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The municipality code of the address",
            "nullable": true
          }
        },
        "description": "Equality/Inequality filter fields for Address"
      },
      "AddressFilterRange": {
        "type": "object",
        "description": "Range filter fields for Address"
      },
      "AddressFilterContains": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The postal address of the address"
          },
          "postalCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The postal code of the address"
          },
          "postalCity": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The city of the address"
          },
          "countryCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The country code of the address"
          },
          "municipalityCode": {
            "type": "array",
            "examples": [
              [
                "example"
              ]
            ],
            "items": {
              "type": "string"
            },
            "description": "The municipality code of the address"
          }
        },
        "description": "Contains filter fields for Address"
      },
      "AddressFilterLike": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The postal address of the address",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The postal code of the address",
            "nullable": true
          },
          "postalCity": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The city of the address",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The country code of the address",
            "nullable": true
          },
          "municipalityCode": {
            "type": "string",
            "examples": [
              "example",
              null
            ],
            "description": "The municipality code of the address",
            "nullable": true
          }
        },
        "description": "LIKE filter fields for Address"
      },
      "AddressFilterNull": {
        "type": "object",
        "properties": {
          "postalAddress": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The postal address of the address",
            "nullable": true
          },
          "postalCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The postal code of the address",
            "nullable": true
          },
          "postalCity": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The city of the address",
            "nullable": true
          },
          "countryCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The country code of the address",
            "nullable": true
          },
          "municipalityCode": {
            "type": "boolean",
            "examples": [
              true,
              null
            ],
            "description": "The municipality code of the address",
            "nullable": true
          }
        },
        "description": "Null filter fields for Address"
      }
    },
    "responses": {
      "SchoolCreate": {
        "description": "Response for School Create operation - returns the created School",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/School"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "title": "Meitner Grundskola",
                  "unitCode": "12345678",
                  "csnSchoolCode": "12345",
                  "municipalityCode": "0184",
                  "schoolType": "Grundskola"
                }
              }
            }
          }
        }
      },
      "SchoolCreate422ResponseBody": {
        "description": "Validation error for School Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for School Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for School Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "SchoolUpdate": {
        "description": "Response for School Update operation - returns the updated School",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/School"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "title": "Meitner Grundskola",
                  "unitCode": "12345678",
                  "csnSchoolCode": "12345",
                  "municipalityCode": "0184",
                  "schoolType": "Grundskola"
                }
              }
            }
          }
        }
      },
      "SchoolUpdate422ResponseBody": {
        "description": "Validation error for School Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for School Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for School Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "SchoolGet": {
        "description": "Response for School Get operation - returns the requested School",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/School"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "title": "Meitner Grundskola",
                  "unitCode": "12345678",
                  "csnSchoolCode": "12345",
                  "municipalityCode": "0184",
                  "schoolType": "Grundskola"
                }
              }
            }
          }
        }
      },
      "SchoolList": {
        "description": "Response for School List operation - returns a paginated list of School",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "title": "Meitner Grundskola",
                        "unitCode": "12345678",
                        "csnSchoolCode": "12345",
                        "municipalityCode": "0184",
                        "schoolType": "Grundskola"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/School"
                      }
                    ]
                  },
                  "description": "Array of School objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "title": "Meitner Grundskola",
                      "unitCode": "12345678",
                      "csnSchoolCode": "12345",
                      "municipalityCode": "0184",
                      "schoolType": "Grundskola"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "SchoolSearch": {
        "description": "Response for School Search operation - returns filtered School results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "title": "Meitner Grundskola",
                        "unitCode": "12345678",
                        "csnSchoolCode": "12345",
                        "municipalityCode": "0184",
                        "schoolType": "Grundskola"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/School"
                      }
                    ]
                  },
                  "description": "Array of School objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "title": "Meitner Grundskola",
                      "unitCode": "12345678",
                      "csnSchoolCode": "12345",
                      "municipalityCode": "0184",
                      "schoolType": "Grundskola"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "SchoolSearch422ResponseBody": {
        "description": "Validation error for School Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for School Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for School Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GroupCreate": {
        "description": "Response for Group Create operation - returns the created Group",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Group"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "category": "Education",
                  "title": "1A",
                  "types": [
                    "Class"
                  ],
                  "moderatorIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "memberIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GroupCreate422ResponseBody": {
        "description": "Validation error for Group Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Group Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Group Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GroupUpdate": {
        "description": "Response for Group Update operation - returns the updated Group",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Group"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "category": "Education",
                  "title": "1A",
                  "types": [
                    "Class"
                  ],
                  "moderatorIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "memberIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GroupUpdate422ResponseBody": {
        "description": "Validation error for Group Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Group Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Group Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GroupGet": {
        "description": "Response for Group Get operation - returns the requested Group",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Group"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "category": "Education",
                  "title": "1A",
                  "types": [
                    "Class"
                  ],
                  "moderatorIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "memberIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GroupList": {
        "description": "Response for Group List operation - returns a paginated list of Group",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "category": "Education",
                        "title": "1A",
                        "types": [
                          "Class"
                        ],
                        "moderatorIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ],
                        "memberIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ]
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Group"
                      }
                    ]
                  },
                  "description": "Array of Group objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "category": "Education",
                      "title": "1A",
                      "types": [
                        "Class"
                      ],
                      "moderatorIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "memberIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "GroupSearch": {
        "description": "Response for Group Search operation - returns filtered Group results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "category": "Education",
                        "title": "1A",
                        "types": [
                          "Class"
                        ],
                        "moderatorIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ],
                        "memberIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ]
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Group"
                      }
                    ]
                  },
                  "description": "Array of Group objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "category": "Education",
                      "title": "1A",
                      "types": [
                        "Class"
                      ],
                      "moderatorIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "memberIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "GroupSearch422ResponseBody": {
        "description": "Validation error for Group Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Group Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Group Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeeCreate": {
        "description": "Response for Employee Create operation - returns the created Employee",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Employee"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567"
                }
              }
            }
          }
        }
      },
      "EmployeeCreate422ResponseBody": {
        "description": "Validation error for Employee Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Employee Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Employee Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeeUpdate": {
        "description": "Response for Employee Update operation - returns the updated Employee",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Employee"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567"
                }
              }
            }
          }
        }
      },
      "EmployeeUpdate422ResponseBody": {
        "description": "Validation error for Employee Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Employee Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Employee Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeeGet": {
        "description": "Response for Employee Get operation - returns the requested Employee",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Employee"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567"
                }
              }
            }
          }
        }
      },
      "EmployeeList": {
        "description": "Response for Employee List operation - returns a paginated list of Employee",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "gender": "Female",
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "dateOfBirth": "2019-12-16",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "+46701234567"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Employee"
                      }
                    ]
                  },
                  "description": "Array of Employee objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "gender": "Female",
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "dateOfBirth": "2019-12-16",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "+46701234567"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "EmployeeSearch": {
        "description": "Response for Employee Search operation - returns filtered Employee results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "gender": "Female",
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "dateOfBirth": "2019-12-16",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "+46701234567"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Employee"
                      }
                    ]
                  },
                  "description": "Array of Employee objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "gender": "Female",
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "dateOfBirth": "2019-12-16",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "+46701234567"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "EmployeeSearch422ResponseBody": {
        "description": "Validation error for Employee Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Employee Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Employee Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeePlacementCreate": {
        "description": "Response for EmployeePlacement Create operation - returns the created EmployeePlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "signature": "LM",
                  "title": "Principal",
                  "roles": [
                    "Admin"
                  ],
                  "startDate": "2024-08-01",
                  "endDate": "2024-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "EmployeePlacementCreate422ResponseBody": {
        "description": "Validation error for EmployeePlacement Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for EmployeePlacement Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for EmployeePlacement Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeePlacementUpdate": {
        "description": "Response for EmployeePlacement Update operation - returns the updated EmployeePlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "signature": "LM",
                  "title": "Principal",
                  "roles": [
                    "Admin"
                  ],
                  "startDate": "2024-08-01",
                  "endDate": "2024-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "EmployeePlacementUpdate422ResponseBody": {
        "description": "Validation error for EmployeePlacement Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for EmployeePlacement Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for EmployeePlacement Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "EmployeePlacementGet": {
        "description": "Response for EmployeePlacement Get operation - returns the requested EmployeePlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "signature": "LM",
                  "title": "Principal",
                  "roles": [
                    "Admin"
                  ],
                  "startDate": "2024-08-01",
                  "endDate": "2024-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "EmployeePlacementList": {
        "description": "Response for EmployeePlacement List operation - returns a paginated list of EmployeePlacement",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "signature": "LM",
                        "title": "Principal",
                        "roles": [
                          "Admin"
                        ],
                        "startDate": "2024-08-01",
                        "endDate": "2024-08-01",
                        "archiveYear": "2024_2025",
                        "archivedAt": "2024-08-01T00:00:00Z"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacement"
                      }
                    ]
                  },
                  "description": "Array of EmployeePlacement objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "signature": "LM",
                      "title": "Principal",
                      "roles": [
                        "Admin"
                      ],
                      "startDate": "2024-08-01",
                      "endDate": "2024-08-01",
                      "archiveYear": "2024_2025",
                      "archivedAt": "2024-08-01T00:00:00Z"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "EmployeePlacementSearch": {
        "description": "Response for EmployeePlacement Search operation - returns filtered EmployeePlacement results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "signature": "LM",
                        "title": "Principal",
                        "roles": [
                          "Admin"
                        ],
                        "startDate": "2024-08-01",
                        "endDate": "2024-08-01",
                        "archiveYear": "2024_2025",
                        "archivedAt": "2024-08-01T00:00:00Z"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacement"
                      }
                    ]
                  },
                  "description": "Array of EmployeePlacement objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "signature": "LM",
                      "title": "Principal",
                      "roles": [
                        "Admin"
                      ],
                      "startDate": "2024-08-01",
                      "endDate": "2024-08-01",
                      "archiveYear": "2024_2025",
                      "archivedAt": "2024-08-01T00:00:00Z"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "EmployeePlacementSearch422ResponseBody": {
        "description": "Validation error for EmployeePlacement Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for EmployeePlacement Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for EmployeePlacement Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GuardianCreate": {
        "description": "Response for Guardian Create operation - returns the created Guardian",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Guardian"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567",
                  "studentIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GuardianCreate422ResponseBody": {
        "description": "Validation error for Guardian Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Guardian Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Guardian Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GuardianUpdate": {
        "description": "Response for Guardian Update operation - returns the updated Guardian",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Guardian"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567",
                  "studentIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GuardianUpdate422ResponseBody": {
        "description": "Validation error for Guardian Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Guardian Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Guardian Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "GuardianGet": {
        "description": "Response for Guardian Get operation - returns the requested Guardian",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Guardian"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567",
                  "studentIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        }
      },
      "GuardianList": {
        "description": "Response for Guardian List operation - returns a paginated list of Guardian",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "+46701234567",
                        "studentIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ]
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Guardian"
                      }
                    ]
                  },
                  "description": "Array of Guardian objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "+46701234567",
                      "studentIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "GuardianSearch": {
        "description": "Response for Guardian Search operation - returns filtered Guardian results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "+46701234567",
                        "studentIDs": [
                          "123e4567-e89b-12d3-a456-426614174000"
                        ]
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Guardian"
                      }
                    ]
                  },
                  "description": "Array of Guardian objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "+46701234567",
                      "studentIDs": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "GuardianSearch422ResponseBody": {
        "description": "Validation error for Guardian Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Guardian Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Guardian Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentCreate": {
        "description": "Response for Student Create operation - returns the created Student",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Student"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "example"
                }
              }
            }
          }
        }
      },
      "StudentCreate422ResponseBody": {
        "description": "Validation error for Student Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Student Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Student Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentUpdate": {
        "description": "Response for Student Update operation - returns the updated Student",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Student"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "example"
                }
              }
            }
          }
        }
      },
      "StudentUpdate422ResponseBody": {
        "description": "Validation error for Student Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Student Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Student Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentGet": {
        "description": "Response for Student Get operation - returns the requested Student",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Student"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "example"
                }
              }
            }
          }
        }
      },
      "StudentList": {
        "description": "Response for Student List operation - returns a paginated list of Student",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "gender": "Female",
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "dateOfBirth": "2019-12-16",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "example"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Student"
                      }
                    ]
                  },
                  "description": "Array of Student objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "gender": "Female",
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "dateOfBirth": "2019-12-16",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "example"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "StudentSearch": {
        "description": "Response for Student Search operation - returns filtered Student results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "gender": "Female",
                        "identityNumber": "20191216-1234",
                        "identityTemporary": true,
                        "firstName": "Lise",
                        "lastName": "Meitner",
                        "dateOfBirth": "2019-12-16",
                        "address": {
                          "postalAddress": "Dalvägen 14",
                          "postalCode": "169 56",
                          "postalCity": "Solna",
                          "countryCode": "SWE",
                          "municipalityCode": "0184"
                        },
                        "emailAddress1": "lise@meitner.se",
                        "emailAddress2": "lise@gmail.com",
                        "phoneNumber1": "+46701234567",
                        "phoneNumber2": "example"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/Student"
                      }
                    ]
                  },
                  "description": "Array of Student objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "gender": "Female",
                      "identityNumber": "20191216-1234",
                      "identityTemporary": true,
                      "firstName": "Lise",
                      "lastName": "Meitner",
                      "dateOfBirth": "2019-12-16",
                      "address": {
                        "postalAddress": "Dalvägen 14",
                        "postalCode": "169 56",
                        "postalCity": "Solna",
                        "countryCode": "SWE",
                        "municipalityCode": "0184"
                      },
                      "emailAddress1": "lise@meitner.se",
                      "emailAddress2": "lise@gmail.com",
                      "phoneNumber1": "+46701234567",
                      "phoneNumber2": "example"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "StudentSearch422ResponseBody": {
        "description": "Validation error for Student Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for Student Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for Student Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentPlacementArchive": {
        "description": "Response for StudentPlacement Archive operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "StudentPlacementRestore": {
        "description": "Response for StudentPlacement Restore operation",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "StudentPlacementCreate": {
        "description": "Response for StudentPlacement Create operation - returns the created StudentPlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "StudentPlacementCreate422ResponseBody": {
        "description": "Validation error for StudentPlacement Create operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for StudentPlacement Create endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for StudentPlacement Create endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentPlacementUpdate": {
        "description": "Response for StudentPlacement Update operation - returns the updated StudentPlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "StudentPlacementUpdate422ResponseBody": {
        "description": "Validation error for StudentPlacement Update operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for StudentPlacement Update endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for StudentPlacement Update endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "StudentPlacementGet": {
        "description": "Response for StudentPlacement Get operation - returns the requested StudentPlacement",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacement"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "external": {
                    "sourceID": "12345678",
                    "source": "ExternalIntegrationAPI"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01",
                  "archiveYear": "2024_2025",
                  "archivedAt": "2024-08-01T00:00:00Z"
                }
              }
            }
          }
        }
      },
      "StudentPlacementList": {
        "description": "Response for StudentPlacement List operation - returns a paginated list of StudentPlacement",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "studentID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolType": "GR",
                        "schoolYear": "1",
                        "hasChildcare": true,
                        "motherTongue": "SWE",
                        "startDate": "2024-08-01",
                        "endDate": "2025-08-01",
                        "archiveYear": "2024_2025",
                        "archivedAt": "2024-08-01T00:00:00Z"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StudentPlacement"
                      }
                    ]
                  },
                  "description": "Array of StudentPlacement objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "studentID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolType": "GR",
                      "schoolYear": "1",
                      "hasChildcare": true,
                      "motherTongue": "SWE",
                      "startDate": "2024-08-01",
                      "endDate": "2025-08-01",
                      "archiveYear": "2024_2025",
                      "archivedAt": "2024-08-01T00:00:00Z"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "StudentPlacementSearch": {
        "description": "Response for StudentPlacement Search operation - returns filtered StudentPlacement results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "external": {
                          "sourceID": "12345678",
                          "source": "ExternalIntegrationAPI"
                        },
                        "studentID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                        "schoolType": "GR",
                        "schoolYear": "1",
                        "hasChildcare": true,
                        "motherTongue": "SWE",
                        "startDate": "2024-08-01",
                        "endDate": "2025-08-01",
                        "archiveYear": "2024_2025",
                        "archivedAt": "2024-08-01T00:00:00Z"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/StudentPlacement"
                      }
                    ]
                  },
                  "description": "Array of StudentPlacement objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "external": {
                        "sourceID": "12345678",
                        "source": "ExternalIntegrationAPI"
                      },
                      "studentID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                      "schoolType": "GR",
                      "schoolYear": "1",
                      "hasChildcare": true,
                      "motherTongue": "SWE",
                      "startDate": "2024-08-01",
                      "endDate": "2025-08-01",
                      "archiveYear": "2024_2025",
                      "archivedAt": "2024-08-01T00:00:00Z"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "StudentPlacementSearch422ResponseBody": {
        "description": "Validation error for StudentPlacement Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for StudentPlacement Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for StudentPlacement Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "AuditEventGet": {
        "description": "Response for AuditEvent Get operation - returns the requested AuditEvent",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEvent"
                }
              ]
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "id": "123e4567-e89b-12d3-a456-426614174000",
                  "meta": {
                    "createdAt": "2024-01-15T10:30:00Z",
                    "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                    "updatedAt": "2024-01-15T14:45:00Z",
                    "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                  },
                  "timestamp": "2024-08-01T00:00:00Z",
                  "resource": "Student",
                  "resourceID": "123e4567-e89b-12d3-a456-426614174000",
                  "type": "Delete"
                }
              }
            }
          }
        }
      },
      "AuditEventList": {
        "description": "Response for AuditEvent List operation - returns a paginated list of AuditEvent",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "timestamp": "2024-08-01T00:00:00Z",
                        "resource": "Student",
                        "resourceID": "123e4567-e89b-12d3-a456-426614174000",
                        "type": "Delete"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditEvent"
                      }
                    ]
                  },
                  "description": "Array of AuditEvent objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "timestamp": "2024-08-01T00:00:00Z",
                      "resource": "Student",
                      "resourceID": "123e4567-e89b-12d3-a456-426614174000",
                      "type": "Delete"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "AuditEventSearch": {
        "description": "Response for AuditEvent Search operation - returns filtered AuditEvent results",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "examples": [
                    [
                      {
                        "id": "123e4567-e89b-12d3-a456-426614174000",
                        "meta": {
                          "createdAt": "2024-01-15T10:30:00Z",
                          "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                          "updatedAt": "2024-01-15T14:45:00Z",
                          "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                        },
                        "timestamp": "2024-08-01T00:00:00Z",
                        "resource": "Student",
                        "resourceID": "123e4567-e89b-12d3-a456-426614174000",
                        "type": "Delete"
                      }
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/AuditEvent"
                      }
                    ]
                  },
                  "description": "Array of AuditEvent objects"
                },
                "pagination": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  ],
                  "examples": [
                    {
                      "offset": 0,
                      "limit": 1,
                      "total": 100
                    }
                  ],
                  "description": "Pagination information"
                }
              }
            },
            "examples": {
              "responseExample": {
                "summary": "Response body example",
                "value": {
                  "data": [
                    {
                      "id": "123e4567-e89b-12d3-a456-426614174000",
                      "meta": {
                        "createdAt": "2024-01-15T10:30:00Z",
                        "createdBy": "987fcdeb-51a2-43d1-b567-123456789abc",
                        "updatedAt": "2024-01-15T14:45:00Z",
                        "updatedBy": "987fcdeb-51a2-43d1-b567-123456789abc"
                      },
                      "timestamp": "2024-08-01T00:00:00Z",
                      "resource": "Student",
                      "resourceID": "123e4567-e89b-12d3-a456-426614174000",
                      "type": "Delete"
                    }
                  ],
                  "pagination": {
                    "offset": 0,
                    "limit": 1,
                    "total": 100
                  }
                }
              }
            }
          }
        }
      },
      "AuditEventSearch422ResponseBody": {
        "description": "Validation error for AuditEvent Search operation - request data failed validation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "UnprocessableEntity",
                      "message": "Validation failed for AuditEvent Search endpoint",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "validationError": {
                "summary": "Validation error example",
                "value": {
                  "error": {
                    "code": "UnprocessableEntity",
                    "message": "Validation failed for AuditEvent Search endpoint",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error400ResponseBody": {
        "description": "Bad Request - The request was malformed or contained invalid parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Bad Request error example",
                "value": {
                  "error": {
                    "code": "BadRequest",
                    "message": "The request contains invalid parameters or malformed data",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error401ResponseBody": {
        "description": "Unauthorized - The request is missing valid authentication credentials",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Unauthorized error example",
                "value": {
                  "error": {
                    "code": "Unauthorized",
                    "message": "Authentication credentials are missing or invalid",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error403ResponseBody": {
        "description": "Forbidden - Request is authenticated, but the user is not allowed to perform the operation",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Forbidden error example",
                "value": {
                  "error": {
                    "code": "Forbidden",
                    "message": "You do not have permission to perform this operation",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error404ResponseBody": {
        "description": "Not Found - The requested resource does not exist",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Not Found error example",
                "value": {
                  "error": {
                    "code": "NotFound",
                    "message": "The requested resource could not be found",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error409ResponseBody": {
        "description": "Conflict - The request could not be completed due to a conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Conflict error example",
                "value": {
                  "error": {
                    "code": "Conflict",
                    "message": "The request conflicts with the current state of the resource",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error429ResponseBody": {
        "description": "Too Many Requests - When the rate limit has been exceeded",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Rate Limited error example",
                "value": {
                  "error": {
                    "code": "RateLimited",
                    "message": "Too many requests - rate limit exceeded",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      },
      "Error500ResponseBody": {
        "description": "Internal Server Error - An unexpected server error occurred",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "examples": [
                    {
                      "code": "BadRequest",
                      "message": "The request contains invalid parameters or malformed data",
                      "requestID": "550e8400-e29b-41d4-a716-446655440000"
                    }
                  ]
                }
              },
              "required": [
                "error"
              ]
            },
            "examples": {
              "errorExample": {
                "summary": "Internal Server error example",
                "value": {
                  "error": {
                    "code": "Internal",
                    "message": "An unexpected server error occurred",
                    "requestID": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "SchoolCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the school, the Source-field is not included."
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "Meitner Grundskola"
                  ],
                  "description": "The title of the school"
                },
                "unitCode": {
                  "type": "string",
                  "examples": [
                    "12345678",
                    null
                  ],
                  "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
                  "nullable": true
                },
                "csnSchoolCode": {
                  "type": "string",
                  "examples": [
                    "12345",
                    null
                  ],
                  "description": "The School Code provided by CSN, required for reports to CSN",
                  "nullable": true
                },
                "municipalityCode": {
                  "type": "string",
                  "examples": [
                    "0184",
                    null
                  ],
                  "description": "Municipality code of the school, is used in reports and printed on grade documents",
                  "nullable": true
                },
                "schoolType": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SchoolType"
                    }
                  ],
                  "examples": [
                    "Grundskola"
                  ],
                  "description": "Type of schooling provided at the school"
                }
              },
              "required": [
                "title",
                "schoolType"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "title": "Meitner Grundskola",
                  "unitCode": "12345678",
                  "csnSchoolCode": "12345",
                  "municipalityCode": "0184",
                  "schoolType": "Grundskola"
                }
              }
            }
          }
        },
        "required": true
      },
      "SchoolUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the school, the Source-field is not included."
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "Meitner Grundskola"
                  ],
                  "description": "The title of the school"
                },
                "unitCode": {
                  "type": "string",
                  "examples": [
                    "12345678",
                    null
                  ],
                  "description": "The School Unit Code provided by SCB, is used in reports and printed on grade documents",
                  "nullable": true
                },
                "csnSchoolCode": {
                  "type": "string",
                  "examples": [
                    "12345",
                    null
                  ],
                  "description": "The School Code provided by CSN, required for reports to CSN",
                  "nullable": true
                },
                "municipalityCode": {
                  "type": "string",
                  "examples": [
                    "0184",
                    null
                  ],
                  "description": "Municipality code of the school, is used in reports and printed on grade documents",
                  "nullable": true
                }
              },
              "required": [
                "title"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "title": "Meitner Grundskola",
                  "unitCode": "12345678",
                  "csnSchoolCode": "12345",
                  "municipalityCode": "0184"
                }
              }
            }
          }
        },
        "required": true
      },
      "SchoolSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SchoolFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "title": [
                      "example"
                    ],
                    "unitCode": [
                      "example"
                    ],
                    "csnSchoolCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "title": [
                      "example"
                    ],
                    "unitCode": [
                      "example"
                    ],
                    "csnSchoolCode": [
                      "example"
                    ],
                    "municipalityCode": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example",
                    "unitCode": "example",
                    "csnSchoolCode": "example",
                    "municipalityCode": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "unitCode": true,
                    "csnSchoolCode": true,
                    "municipalityCode": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "unitCode": true,
                    "csnSchoolCode": true,
                    "municipalityCode": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "GroupCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the employee, the Source-field is not included."
                },
                "schoolID": {
                  "type": "string",
                  "examples": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "format": "uuid",
                  "description": "The ID of the school the group belongs to"
                },
                "category": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/GroupCategory"
                    }
                  ],
                  "examples": [
                    "Education"
                  ],
                  "description": "If the category is Education, the ModeratorIDs have to be employees and the MemberIDs have to be students of the school. If the category is Other, it will not be possible to use the IsClass, IsChildcare and IsMentor fields.\n",
                  "default": "Education"
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "1A"
                  ],
                  "description": "The title of the group, must be unique within the school."
                },
                "types": {
                  "type": "array",
                  "examples": [
                    [
                      "Class"
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GroupType"
                      }
                    ]
                  },
                  "description": "The types of the group"
                },
                "moderatorIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n"
                },
                "memberIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n"
                }
              },
              "required": [
                "schoolID",
                "title"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "category": "Education",
                  "title": "1A",
                  "types": [
                    "Class"
                  ],
                  "moderatorIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "memberIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        },
        "required": true
      },
      "GroupUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the employee, the Source-field is not included."
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "1A"
                  ],
                  "description": "The title of the group, must be unique within the school."
                },
                "types": {
                  "type": "array",
                  "examples": [
                    [
                      "Class"
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/GroupType"
                      }
                    ]
                  },
                  "description": "The types of the group"
                },
                "moderatorIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the moderators of the group.  Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Moderators have to be employees of the school.\n"
                },
                "memberIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the members of the group. Can be any user type (Student, Employee, Guardian) if the Category is Other. If the Category is Education, the Members have to be students of the school.\n"
                }
              },
              "required": [
                "title"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "title": "1A",
                  "types": [
                    "Class"
                  ],
                  "moderatorIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "memberIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        },
        "required": true
      },
      "GroupSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GroupFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "title": "example",
                    "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                    "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "title": "example",
                    "moderatorIDs": "123e4567-e89b-12d3-a456-426614174000",
                    "memberIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "title": [
                      "example"
                    ],
                    "moderatorIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "memberIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "title": [
                      "example"
                    ],
                    "moderatorIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "memberIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "title": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "types": true,
                    "moderatorIDs": true,
                    "memberIDs": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "types": true,
                    "moderatorIDs": true,
                    "memberIDs": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "EmployeeCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the employee placement, the Source-field is not included."
                },
                "gender": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Gender"
                    }
                  ],
                  "examples": [
                    "Female",
                    null
                  ],
                  "description": "The gender of the employee",
                  "nullable": true
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the employee, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the employee",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the employee"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the employee"
                },
                "dateOfBirth": {
                  "type": "string",
                  "examples": [
                    "2019-12-16",
                    null
                  ],
                  "format": "date",
                  "description": "The date of birth of the employee",
                  "nullable": true
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the employee"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567"
                }
              }
            }
          }
        },
        "required": true
      },
      "EmployeeUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the employee placement, the Source-field is not included."
                },
                "gender": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Gender"
                    }
                  ],
                  "examples": [
                    "Female",
                    null
                  ],
                  "description": "The gender of the employee",
                  "nullable": true
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the employee, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the employee",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the employee"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the employee"
                },
                "dateOfBirth": {
                  "type": "string",
                  "examples": [
                    "2019-12-16",
                    null
                  ],
                  "format": "date",
                  "description": "The date of birth of the employee",
                  "nullable": true
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the employee"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The primary email address of the employee, will be used for communication with the employee from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the employee, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the employee, will be used for communication with the employee from the system and must be unique within the organization.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The secondary phone number of the employee, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567"
                }
              }
            }
          }
        },
        "required": true
      },
      "EmployeeSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeeFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "EmployeePlacementCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the guardian, the Source-field is not included."
                },
                "employeeID": {
                  "type": "string",
                  "examples": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "format": "uuid",
                  "description": "The ID of the employee the placement belongs to"
                },
                "schoolID": {
                  "type": "string",
                  "examples": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "format": "uuid",
                  "description": "The ID of the school the placement belongs to"
                },
                "signature": {
                  "type": "string",
                  "examples": [
                    "LM",
                    null
                  ],
                  "description": "The signature of the employee",
                  "nullable": true
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "Principal",
                    null
                  ],
                  "description": "The title of the employee",
                  "nullable": true
                },
                "roles": {
                  "type": "array",
                  "examples": [
                    [
                      "Admin"
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacementRole"
                      }
                    ]
                  },
                  "description": "The roles of the employee"
                },
                "startDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01"
                  ],
                  "format": "date",
                  "description": "The start date of the placement for the employee"
                },
                "endDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01",
                    null
                  ],
                  "format": "date",
                  "description": "The end date of the placement for the employee",
                  "nullable": true
                }
              },
              "required": [
                "employeeID",
                "schoolID",
                "startDate"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "signature": "LM",
                  "title": "Principal",
                  "roles": [
                    "Admin"
                  ],
                  "startDate": "2024-08-01",
                  "endDate": "2024-08-01"
                }
              }
            }
          }
        },
        "required": true
      },
      "EmployeePlacementUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "External is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the guardian, the Source-field is not included."
                },
                "signature": {
                  "type": "string",
                  "examples": [
                    "LM",
                    null
                  ],
                  "description": "The signature of the employee",
                  "nullable": true
                },
                "title": {
                  "type": "string",
                  "examples": [
                    "Principal",
                    null
                  ],
                  "description": "The title of the employee",
                  "nullable": true
                },
                "roles": {
                  "type": "array",
                  "examples": [
                    [
                      "Admin"
                    ]
                  ],
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmployeePlacementRole"
                      }
                    ]
                  },
                  "description": "The roles of the employee"
                },
                "startDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01"
                  ],
                  "format": "date",
                  "description": "The start date of the placement for the employee"
                },
                "endDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01",
                    null
                  ],
                  "format": "date",
                  "description": "The end date of the placement for the employee",
                  "nullable": true
                }
              },
              "required": [
                "startDate"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "signature": "LM",
                  "title": "Principal",
                  "roles": [
                    "Admin"
                  ],
                  "startDate": "2024-08-01",
                  "endDate": "2024-08-01"
                }
              }
            }
          }
        },
        "required": true
      },
      "EmployeePlacementSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EmployeePlacementFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "signature": "example",
                    "title": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "employeeID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "signature": "example",
                    "title": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "employeeID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "signature": [
                      "example"
                    ],
                    "title": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "employeeID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "signature": [
                      "example"
                    ],
                    "title": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "signature": "example",
                    "title": "example",
                    "archiveYear": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "signature": "example",
                    "title": "example",
                    "archiveYear": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "signature": true,
                    "title": true,
                    "roles": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "signature": true,
                    "title": true,
                    "roles": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "GuardianCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the guardian, the Source-field is not included."
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the guardian, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the guardian",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the guardian"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the guardian"
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the guardian"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "studentIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the students the guardian is responsible for."
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567",
                  "studentIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        },
        "required": true
      },
      "GuardianUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the guardian, the Source-field is not included."
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the guardian, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the guardian",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the guardian"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the guardian"
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the guardian"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The email address of the guardian, will be used for communication with the guardian from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the guardian, will be used for communication with the guardian from the system.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The secondary phone number of the guardian, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "studentIDs": {
                  "type": "array",
                  "examples": [
                    [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  ],
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "description": "The IDs of the students the guardian is responsible for."
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "+46701234567",
                  "studentIDs": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ]
                }
              }
            }
          }
        },
        "required": true
      },
      "GuardianSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GuardianFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example",
                    "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example",
                    "studentIDs": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    }
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ],
                    "studentIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ],
                    "studentIDs": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true,
                    "studentIDs": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true,
                    "studentIDs": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "StudentCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the student, the Source-field is not included."
                },
                "gender": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Gender"
                    }
                  ],
                  "examples": [
                    "Female",
                    null
                  ],
                  "description": "The gender of the student",
                  "nullable": true
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the student, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the student",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the student"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the student"
                },
                "dateOfBirth": {
                  "type": "string",
                  "examples": [
                    "2019-12-16",
                    null
                  ],
                  "format": "date",
                  "description": "The date of birth of the student",
                  "nullable": true
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the student"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the student, will be used for communication with the student from the system.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "example",
                    null
                  ],
                  "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "example"
                }
              }
            }
          }
        },
        "required": true
      },
      "StudentUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the student, the Source-field is not included."
                },
                "gender": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Gender"
                    }
                  ],
                  "examples": [
                    "Female",
                    null
                  ],
                  "description": "The gender of the student",
                  "nullable": true
                },
                "identityNumber": {
                  "type": "string",
                  "examples": [
                    "20191216-1234"
                  ],
                  "description": "The identity number of the student, must be unique within the organization."
                },
                "identityTemporary": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "If the identity number is temporary for the student",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "examples": [
                    "Lise"
                  ],
                  "description": "The first name of the student"
                },
                "lastName": {
                  "type": "string",
                  "examples": [
                    "Meitner"
                  ],
                  "description": "The last name of the student"
                },
                "dateOfBirth": {
                  "type": "string",
                  "examples": [
                    "2019-12-16",
                    null
                  ],
                  "format": "date",
                  "description": "The date of birth of the student",
                  "nullable": true
                },
                "address": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Address"
                    }
                  ],
                  "examples": [
                    {
                      "postalAddress": "Dalvägen 14",
                      "postalCode": "169 56",
                      "postalCity": "Solna",
                      "countryCode": "SWE",
                      "municipalityCode": "0184"
                    }
                  ],
                  "description": "The address of the student"
                },
                "emailAddress1": {
                  "type": "string",
                  "examples": [
                    "lise@meitner.se",
                    null
                  ],
                  "description": "The primary email address of the student, will be used for communication with the student from the system and must be unique within the organization.\nCan be used to login to the system if password-authentication is enabled for the organization.\n",
                  "nullable": true
                },
                "emailAddress2": {
                  "type": "string",
                  "examples": [
                    "lise@gmail.com",
                    null
                  ],
                  "description": "The secondary email address of the student, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                },
                "phoneNumber1": {
                  "type": "string",
                  "examples": [
                    "+46701234567",
                    null
                  ],
                  "description": "The primary phone number of the student, will be used for communication with the student from the system.",
                  "nullable": true
                },
                "phoneNumber2": {
                  "type": "string",
                  "examples": [
                    "example",
                    null
                  ],
                  "description": "The secondary phone number of the student, will not be used within the system, but will be displayed for contact information.",
                  "nullable": true
                }
              },
              "required": [
                "identityNumber",
                "firstName",
                "lastName"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "gender": "Female",
                  "identityNumber": "20191216-1234",
                  "identityTemporary": true,
                  "firstName": "Lise",
                  "lastName": "Meitner",
                  "dateOfBirth": "2019-12-16",
                  "address": {
                    "postalAddress": "Dalvägen 14",
                    "postalCode": "169 56",
                    "postalCity": "Solna",
                    "countryCode": "SWE",
                    "municipalityCode": "0184"
                  },
                  "emailAddress1": "lise@meitner.se",
                  "emailAddress2": "lise@gmail.com",
                  "phoneNumber1": "+46701234567",
                  "phoneNumber2": "example"
                }
              }
            }
          }
        },
        "required": true
      },
      "StudentSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "identityTemporary": true,
                    "firstName": "example",
                    "lastName": "example",
                    "dateOfBirth": "2024-01-15",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "dateOfBirth": "2024-01-15"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "identityNumber": [
                      "example"
                    ],
                    "identityTemporary": [
                      true
                    ],
                    "firstName": [
                      "example"
                    ],
                    "lastName": [
                      "example"
                    ],
                    "dateOfBirth": [
                      "2024-01-15"
                    ],
                    "address": {
                      "postalAddress": [
                        "example"
                      ],
                      "postalCode": [
                        "example"
                      ],
                      "postalCity": [
                        "example"
                      ],
                      "countryCode": [
                        "example"
                      ],
                      "municipalityCode": [
                        "example"
                      ]
                    },
                    "emailAddress1": [
                      "example"
                    ],
                    "emailAddress2": [
                      "example"
                    ],
                    "phoneNumber1": [
                      "example"
                    ],
                    "phoneNumber2": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "identityNumber": "example",
                    "firstName": "example",
                    "lastName": "example",
                    "address": {
                      "postalAddress": "example",
                      "postalCode": "example",
                      "postalCity": "example",
                      "countryCode": "example",
                      "municipalityCode": "example"
                    },
                    "emailAddress1": "example",
                    "emailAddress2": "example",
                    "phoneNumber1": "example",
                    "phoneNumber2": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "gender": true,
                    "dateOfBirth": true,
                    "address": {
                      "postalAddress": true,
                      "postalCode": true,
                      "postalCity": true,
                      "countryCode": true,
                      "municipalityCode": true
                    },
                    "emailAddress1": true,
                    "emailAddress2": true,
                    "phoneNumber1": true,
                    "phoneNumber2": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "StudentPlacementCreate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the student placement, the Source-field is not included."
                },
                "studentID": {
                  "type": "string",
                  "examples": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "format": "uuid",
                  "description": "The ID of the student the placement belongs to"
                },
                "schoolID": {
                  "type": "string",
                  "examples": [
                    "123e4567-e89b-12d3-a456-426614174000"
                  ],
                  "format": "uuid",
                  "description": "The ID of the school the student is placed in"
                },
                "schoolType": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StudentPlacementSchoolType"
                    }
                  ],
                  "examples": [
                    "GR"
                  ],
                  "description": "The school type for the student, if not provided on Create, the school type will be fetched from the school."
                },
                "schoolYear": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SchoolYear"
                    }
                  ],
                  "examples": [
                    "1",
                    null
                  ],
                  "description": "The school year the student is placed in",
                  "nullable": true
                },
                "hasChildcare": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "Whether the student has childcare",
                  "default": false
                },
                "motherTongue": {
                  "type": "string",
                  "examples": [
                    "SWE",
                    null
                  ],
                  "description": "The mother tongue of the student",
                  "nullable": true
                },
                "startDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01"
                  ],
                  "format": "date",
                  "description": "The start date of the placement"
                },
                "endDate": {
                  "type": "string",
                  "examples": [
                    "2025-08-01",
                    null
                  ],
                  "format": "date",
                  "description": "The end date of the placement",
                  "nullable": true
                }
              },
              "required": [
                "studentID",
                "schoolID",
                "schoolType",
                "startDate"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "studentID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01"
                }
              }
            }
          }
        },
        "required": true
      },
      "StudentPlacementUpdate": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "external": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ExternalRequest"
                    }
                  ],
                  "examples": [
                    {
                      "sourceID": "12345678"
                    }
                  ],
                  "description": "ExternalRequest is the External-object used on Update and Create operations, since it should only be allowed to set SourceID for the student placement, the Source-field is not included."
                },
                "schoolType": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/StudentPlacementSchoolType"
                    }
                  ],
                  "examples": [
                    "GR"
                  ],
                  "description": "The school type for the student, if not provided on Create, the school type will be fetched from the school."
                },
                "schoolYear": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SchoolYear"
                    }
                  ],
                  "examples": [
                    "1",
                    null
                  ],
                  "description": "The school year the student is placed in",
                  "nullable": true
                },
                "hasChildcare": {
                  "type": "boolean",
                  "examples": [
                    true
                  ],
                  "description": "Whether the student has childcare",
                  "default": false
                },
                "motherTongue": {
                  "type": "string",
                  "examples": [
                    "SWE",
                    null
                  ],
                  "description": "The mother tongue of the student",
                  "nullable": true
                },
                "startDate": {
                  "type": "string",
                  "examples": [
                    "2024-08-01"
                  ],
                  "format": "date",
                  "description": "The start date of the placement"
                },
                "endDate": {
                  "type": "string",
                  "examples": [
                    "2025-08-01",
                    null
                  ],
                  "format": "date",
                  "description": "The end date of the placement",
                  "nullable": true
                }
              },
              "required": [
                "schoolType",
                "startDate"
              ]
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "external": {
                    "sourceID": "12345678"
                  },
                  "schoolType": "GR",
                  "schoolYear": "1",
                  "hasChildcare": true,
                  "motherTongue": "SWE",
                  "startDate": "2024-08-01",
                  "endDate": "2025-08-01"
                }
              }
            }
          }
        },
        "required": true
      },
      "StudentPlacementSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StudentPlacementFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "studentID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "hasChildcare": true,
                    "motherTongue": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "studentID": "123e4567-e89b-12d3-a456-426614174000",
                    "schoolID": "123e4567-e89b-12d3-a456-426614174000",
                    "hasChildcare": true,
                    "motherTongue": "example",
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archiveYear": "example",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "startDate": "2024-01-15",
                    "endDate": "2024-01-15",
                    "archivedAt": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "studentID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "hasChildcare": [
                      true
                    ],
                    "motherTongue": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "external": {
                      "sourceID": [
                        "example"
                      ],
                      "source": [
                        "example"
                      ]
                    },
                    "studentID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "schoolID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "hasChildcare": [
                      true
                    ],
                    "motherTongue": [
                      "example"
                    ],
                    "startDate": [
                      "2024-01-15"
                    ],
                    "endDate": [
                      "2024-01-15"
                    ],
                    "archiveYear": [
                      "example"
                    ]
                  },
                  "like": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "motherTongue": "example",
                    "archiveYear": "example"
                  },
                  "notLike": {
                    "external": {
                      "sourceID": "example",
                      "source": "example"
                    },
                    "motherTongue": "example",
                    "archiveYear": "example"
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "schoolYear": true,
                    "motherTongue": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    },
                    "external": {
                      "sourceID": true,
                      "source": true
                    },
                    "schoolYear": true,
                    "motherTongue": true,
                    "endDate": true,
                    "archiveYear": true,
                    "archivedAt": true
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      },
      "AuditEventSearch": {
        "description": "Request body",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditEventFilter"
                }
              ],
              "description": "Filter criteria to search for specific records"
            },
            "examples": {
              "requestExample": {
                "summary": "Request body example",
                "value": {
                  "equals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "timestamp": "2024-01-15T10:30:00Z",
                    "resourceID": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "notEquals": {
                    "id": "123e4567-e89b-12d3-a456-426614174000",
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "createdBy": "123e4567-e89b-12d3-a456-426614174000",
                      "updatedAt": "2024-01-15T10:30:00Z",
                      "updatedBy": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "timestamp": "2024-01-15T10:30:00Z",
                    "resourceID": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "greaterThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "smallerThan": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "greaterOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "smallerOrEqual": {
                    "meta": {
                      "createdAt": "2024-01-15T10:30:00Z",
                      "updatedAt": "2024-01-15T10:30:00Z"
                    },
                    "timestamp": "2024-01-15T10:30:00Z"
                  },
                  "contains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "resourceID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "notContains": {
                    "id": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ],
                    "meta": {
                      "createdBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ],
                      "updatedBy": [
                        "123e4567-e89b-12d3-a456-426614174000"
                      ]
                    },
                    "resourceID": [
                      "123e4567-e89b-12d3-a456-426614174000"
                    ]
                  },
                  "null": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    }
                  },
                  "notNull": {
                    "meta": {
                      "createdBy": true,
                      "updatedAt": true,
                      "updatedBy": true
                    }
                  },
                  "orCondition": true
                }
              }
            }
          }
        },
        "required": false
      }
    },
    "securitySchemes": {
      "ClientCredentials": {
        "type": "apiKey",
        "name": "ClientID",
        "in": "header"
      },
      "ClientSecret": {
        "type": "apiKey",
        "name": "ClientSecret",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "ClientCredentials": [],
      "ClientSecret": []
    }
  ],
  "tags": [
    {
      "name": "School",
      "description": "The `School` resource represents a school where daily operations occur. A school must exist before you can create StudentPlacements, EmployeePlacements, or Groups.\n \nThis resource can be created, Updated, listed, retrieved, and deleted using the standard resource structure. It **does not** support search and filtering.\n"
    },
    {
      "name": "Group",
      "description": "Group holds the information about a group of students."
    },
    {
      "name": "Employee",
      "description": "Employee holds the personal information about an employee in the organization."
    },
    {
      "name": "EmployeePlacement",
      "description": "EmployeePlacement holds the information about an employee's placement in a school."
    },
    {
      "name": "Guardian",
      "description": "Guardian holds the information about a guardian of a student."
    },
    {
      "name": "Student",
      "description": "Student holds the personal information about a student, information about the school is stored in the StudentPlacement-resource."
    },
    {
      "name": "StudentPlacement",
      "description": "StudentPlacement holds the placement information about a student in a specific school."
    },
    {
      "name": "AuditEvent",
      "description": "AuditEvent holds the information about an audit event."
    }
  ],
  "x-speakeasy-retries": {
    "strategy": "backoff",
    "backoff": {
      "initialInterval": 1000,
      "maxInterval": 30000,
      "maxElapsedTime": 1800000,
      "exponent": 2
    },
    "statusCodes": [
      "500",
      "502",
      "503",
      "504",
      "429"
    ],
    "retryConnectionErrors": false
  },
  "x-speakeasy-timeout": 45000
}